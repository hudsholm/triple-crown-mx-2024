[
  {
    "objectID": "tcmx_report_2024.html",
    "href": "tcmx_report_2024.html",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "",
    "text": "The Triple Crown Series is Canada’s premier off-road motorcycle racing series. Data including the places and lap times of riders are freely available online, provided by Trackside. However, there exists no published exploration or analysis on the series. This report aims to take these first steps and do some exploratory data analysis."
  },
  {
    "objectID": "tcmx_report_2024.html#demographic-summary",
    "href": "tcmx_report_2024.html#demographic-summary",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.1 Demographic summary",
    "text": "4.1 Demographic summary\nDistributions of home locations:\n450 class:\n\nall_2024_complete |&gt;\n  filter(class == \"450\") |&gt;\n  distinct(rider, location) |&gt;\n  group_by(location) |&gt;\n  summarize(n = n()) |&gt;\n  ungroup() |&gt;\n  arrange(desc(n)) |&gt;\n  gt() |&gt;\n  cols_label(location = \"Location\",\n             n = \"Number of Riders\")\n\n\n\n\n\n\n\nLocation\nNumber of Riders\n\n\n\n\nOntario\n12\n\n\nQuebec\n10\n\n\nBritish Columbia\n9\n\n\nAlberta\n6\n\n\nMichigan\n4\n\n\nWashington\n4\n\n\nConnecticut\n3\n\n\nNew York\n3\n\n\nNova Scotia\n3\n\n\nWisconsin\n3\n\n\nFlorida\n2\n\n\nGeorgia\n2\n\n\nManitoba\n2\n\n\nMassachusetts\n2\n\n\nNevada\n2\n\n\nNew Brunswick\n2\n\n\nPennsylvania\n2\n\n\nWyoming\n2\n\n\nCalifornia\n1\n\n\nDenmark\n1\n\n\nFrance\n1\n\n\nIllinois\n1\n\n\nIowa\n1\n\n\nNew Zealand\n1\n\n\nNorth Dakota\n1\n\n\nSaskatchewan\n1\n\n\nTexas\n1\n\n\nUtah\n1\n\n\n\n\n\n\n\n250 class:\n\nall_2024_complete |&gt;\n  filter(class == \"250\") |&gt;\n  distinct(rider, location) |&gt;\n  group_by(location) |&gt;\n  summarize(n = n()) |&gt;\n  ungroup() |&gt;\n  arrange(desc(n)) |&gt;\n  gt() |&gt;\n  cols_label(location = \"Location\",\n             n = \"Number of Riders\")\n\n\n\n\n\n\n\nLocation\nNumber of Riders\n\n\n\n\nOntario\n20\n\n\nBritish Columbia\n13\n\n\nQuebec\n11\n\n\nAlberta\n8\n\n\nManitoba\n8\n\n\nWashington\n5\n\n\nSaskatchewan\n4\n\n\nConnecticut\n3\n\n\nPennsylvania\n3\n\n\nWisconsin\n3\n\n\nFlorida\n2\n\n\nIllinois\n2\n\n\nMassachusetts\n2\n\n\nMichigan\n2\n\n\nNova Scotia\n2\n\n\nAustralia\n1\n\n\nCalifornia\n1\n\n\nGeorgia\n1\n\n\nIdaho\n1\n\n\nIowa\n1\n\n\nMinnesota\n1\n\n\nNew Brunswick\n1\n\n\nNew Hampshire\n1\n\n\nNew Mexico\n1\n\n\nNew York\n1\n\n\nNorth Carolina\n1\n\n\nSouth Carolina\n1\n\n\nTennessee\n1\n\n\nUnited Kingdom\n1\n\n\n\n\n\n\n\nWMX class:\n\nall_2024_complete |&gt;\n  filter(class == \"WMX\") |&gt;\n  distinct(rider, location) |&gt;\n  group_by(location) |&gt;\n  summarize(n = n()) |&gt;\n  ungroup() |&gt;\n  arrange(desc(n)) |&gt;\n  gt() |&gt;\n  cols_label(location = \"Location\",\n             n = \"Number of Riders\")\n\n\n\n\n\n\n\nLocation\nNumber of Riders\n\n\n\n\nOntario\n14\n\n\nQuebec\n14\n\n\nAlberta\n8\n\n\nManitoba\n7\n\n\nBritish Columbia\n4\n\n\nNova Scotia\n4\n\n\nSaskatchewan\n3\n\n\nUnknown\n3\n\n\nCalifornia\n1\n\n\nConnecticut\n1\n\n\nIdaho\n1\n\n\nMassachusetts\n1\n\n\nMichigan\n1\n\n\nNew Brunswick\n1\n\n\nNorth Carolina\n1\n\n\nPennsylvania\n1\n\n\nWisconsin\n1"
  },
  {
    "objectID": "tcmx_report_2024.html#transition-matrices",
    "href": "tcmx_report_2024.html#transition-matrices",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.2 Transition matrices",
    "text": "4.2 Transition matrices\nQ1: What is the likelihood to go from one position to any other position on any given lap?\nLet’s start with the 450 class.\nFormatting the empirical data:\n\nall_2024_450_add &lt;- all_2024_complete |&gt;\n  filter(class == \"450\") |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place, place_next) |&gt;\n  select(place, place_next) |&gt;\n  group_by(place, place_next) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_450_add2 &lt;- all_2024_450_add |&gt;\n  group_by(place) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_450_add &lt;- all_2024_450_add |&gt;\n  left_join(all_2024_450_add2) |&gt;\n  mutate(prob = n/total)\n\nCreating the transition matrix:\n\nIndividual place positions - We have a 30 x 30 matrix since 450 motos in 2024 included a maximum of 30 riders.\n\n\nrows = 30\ncols = 30\ncats &lt;- 1:30\n\nmatrix450_1 &lt;- matrix(0, nrow = rows, ncol = cols)\nfor (i in 1:rows) {\n  for (j in 1:cols) {\n    matrix_row &lt;- all_2024_450_add |&gt; \n      filter(place == i & place_next == j)\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_450_add |&gt; \n        filter(place == i & place_next == j) |&gt; pull(prob)\n    }\n    matrix450_1[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix450_1) &lt;- cats\ncolnames(matrix450_1) &lt;- cats\nprint(round(matrix450_1, 2))\n\n      1    2    3    4    5    6    7    8    9   10   11   12   13   14   15\n1  0.96 0.03 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.05 0.90 0.04 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.00 0.05 0.84 0.08 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0.00 0.01 0.11 0.78 0.07 0.03 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.00 0.00 0.13 0.77 0.06 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.01 0.12 0.77 0.07 0.02 0.01 0.00 0.00 0.00 0.00 0.00 0.00\n7  0.00 0.00 0.00 0.01 0.03 0.09 0.77 0.08 0.01 0.00 0.00 0.00 0.00 0.00 0.01\n8  0.00 0.00 0.00 0.00 0.00 0.05 0.10 0.75 0.09 0.01 0.00 0.00 0.00 0.00 0.00\n9  0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.12 0.72 0.09 0.03 0.02 0.00 0.00 0.00\n10 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.12 0.77 0.06 0.02 0.01 0.00 0.00\n11 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.03 0.10 0.70 0.10 0.03 0.01 0.01\n12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.02 0.17 0.67 0.10 0.03 0.00\n13 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.16 0.65 0.10 0.03\n14 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.01 0.02 0.18 0.62 0.11\n15 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.02 0.18 0.60\n16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.04 0.18\n17 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.05\n18 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.02\n19 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01\n20 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n21 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n22 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n23 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n24 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n25 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n26 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n27 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n28 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n29 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n30 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n     16   17   18   19   20   21   22   23   24   25   26   27   28   29   30\n1  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n7  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n8  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n9  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n10 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n11 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n13 0.01 0.02 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n14 0.03 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n15 0.12 0.04 0.00 0.00 0.00 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n16 0.62 0.10 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.00\n17 0.14 0.64 0.13 0.01 0.00 0.00 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n18 0.05 0.16 0.55 0.14 0.02 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00\n19 0.01 0.02 0.23 0.58 0.10 0.02 0.00 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n20 0.00 0.00 0.05 0.19 0.58 0.10 0.02 0.01 0.00 0.00 0.01 0.00 0.00 0.00 0.00\n21 0.01 0.00 0.01 0.03 0.21 0.57 0.09 0.03 0.02 0.00 0.00 0.00 0.00 0.01 0.00\n22 0.00 0.00 0.01 0.01 0.06 0.18 0.56 0.11 0.02 0.01 0.01 0.00 0.00 0.00 0.00\n23 0.00 0.00 0.00 0.01 0.01 0.07 0.23 0.54 0.09 0.01 0.01 0.01 0.01 0.00 0.00\n24 0.00 0.00 0.00 0.00 0.01 0.02 0.03 0.23 0.52 0.10 0.04 0.03 0.00 0.00 0.00\n25 0.00 0.00 0.00 0.00 0.01 0.00 0.03 0.03 0.22 0.61 0.07 0.03 0.00 0.02 0.00\n26 0.00 0.00 0.00 0.00 0.00 0.00 0.02 0.03 0.05 0.20 0.59 0.07 0.03 0.01 0.01\n27 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.05 0.05 0.20 0.54 0.13 0.03 0.01\n28 0.00 0.01 0.00 0.00 0.00 0.01 0.00 0.01 0.02 0.01 0.09 0.23 0.55 0.05 0.01\n29 0.00 0.00 0.00 0.00 0.00 0.02 0.01 0.00 0.00 0.01 0.04 0.10 0.21 0.58 0.02\n30 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.00 0.12 0.19 0.66\n\n\n\nGrouped place positions - The 30 x 30 matrix can be overwhelming. So, let’s group the place positions and apply the same method. Here are the group we will use: 1-5, 6-10, 11-15, 16-20, 21-25, 26-30. This will require some reformatting of the empirical data.\n\n\nall_2024_450_placecat &lt;- all_2024_complete |&gt;\n  filter(class == \"450\") |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place, place_next) |&gt;\n  select(place, place_next) |&gt;\n  mutate(place_cat = ifelse(place &gt;= 1 & place &lt;= 5, \"1-5\",\n                     ifelse(place &gt;= 6 & place &lt;= 10, \"6-10\",\n                     ifelse(place &gt;= 11 & place &lt;= 15, \"11-15\",\n                     ifelse(place &gt;= 16 & place &lt;= 20, \"16-20\",\n                     ifelse(place &gt;= 21 & place &lt;= 25, \n                            \"21-25\",\"26-30\"))))),\n         place_next_cat = ifelse(place_next &gt;= 1 & place_next &lt;= 5, \"1-5\",\n                          ifelse(place_next &gt;= 6 & place_next &lt;= 10,\n                                 \"6-10\",\n                          ifelse(place_next &gt;= 11 & place_next &lt;= 15, \n                                 \"11-15\",\n                          ifelse(place_next &gt;= 16 & place_next &lt;= 20, \n                                 \"16-20\",\n                          ifelse(place_next &gt;= 21 & place_next &lt;= 25, \n                                 \"21-25\", \"26-30\")))))) |&gt;\n  select(place_cat, place_next_cat) |&gt;\n  group_by(place_cat, place_next_cat) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_450_placecat2 &lt;- all_2024_450_placecat |&gt;\n  group_by(place_cat) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_450_placecat &lt;- all_2024_450_placecat |&gt;\n  left_join(all_2024_450_placecat2) |&gt;\n  mutate(prob = n/total)\n\nrows2 = 6\ncols2 = 6\ncats2 &lt;- c(\"1-5\", \"6-10\", \"11-15\", \"16-20\", \"21-25\", \"26-30\")\n\nmatrix450_2 &lt;- matrix(0, nrow = rows2, ncol = cols2)\nfor (i in 1:rows2) {\n  for (j in 1:cols2) {\n    matrix_row &lt;- all_2024_450_placecat |&gt;\n      filter(place_cat == cats2[i] & place_next_cat == cats2[j])\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_450_placecat |&gt; \n        filter(place_cat == cats2[i] & place_next_cat == cats2[j]) |&gt; pull(prob)\n    }\n    matrix450_2[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix450_2) &lt;- cats2\ncolnames(matrix450_2) &lt;- cats2\nprint(round(matrix450_2, 3))\n\n        1-5  6-10 11-15 16-20 21-25 26-30\n1-5   0.971 0.027 0.001 0.001 0.000 0.000\n6-10  0.033 0.934 0.030 0.002 0.001 0.001\n11-15 0.000 0.040 0.901 0.052 0.004 0.003\n16-20 0.000 0.000 0.070 0.871 0.048 0.011\n21-25 0.000 0.000 0.001 0.081 0.866 0.053\n26-30 0.000 0.000 0.000 0.002 0.143 0.855\n\n\nLet’s apply the same analysis to the 250 class. The only difference will be that 250 motos can include a maximum of 40 riders so the groups will be 1-5, 6-10, 11-15, 16-20, 21-25, 26-30, 31-35, 36-40.\n\nall_2024_250_add &lt;- all_2024_complete |&gt;\n  filter(class == \"250\") |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place, place_next) |&gt;\n  select(place, place_next) |&gt;\n  group_by(place, place_next) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_250_add2 &lt;- all_2024_250_add |&gt;\n  group_by(place) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_250_add &lt;- all_2024_250_add |&gt;\n  left_join(all_2024_250_add2) |&gt;\n  mutate(prob = n/total)\n\nrows = 40\ncols = 40\ncats &lt;- 1:40\n\nmatrix250_1 &lt;- matrix(0, nrow = rows, ncol = cols)\nfor (i in 1:rows) {\n  for (j in 1:cols) {\n    matrix_row &lt;- all_2024_250_add |&gt; \n      filter(place == i & place_next == j)\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_250_add |&gt; \n        filter(place == i & place_next == j) |&gt; pull(prob)\n    }\n    matrix250_1[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix250_1) &lt;- cats\ncolnames(matrix250_1) &lt;- cats\nprint(round(matrix250_1, 2))\n\n      1    2    3    4    5    6    7    8    9   10   11   12   13   14   15\n1  0.97 0.03 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.04 0.89 0.04 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.00 0.07 0.87 0.04 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0.00 0.01 0.08 0.79 0.08 0.02 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.00 0.01 0.14 0.70 0.10 0.04 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.02 0.15 0.69 0.09 0.03 0.00 0.00 0.01 0.00 0.00 0.00 0.00\n7  0.00 0.00 0.00 0.00 0.05 0.17 0.64 0.09 0.01 0.02 0.00 0.00 0.00 0.00 0.00\n8  0.00 0.00 0.00 0.00 0.00 0.01 0.17 0.67 0.07 0.02 0.02 0.00 0.01 0.00 0.00\n9  0.00 0.00 0.00 0.00 0.00 0.00 0.04 0.14 0.68 0.10 0.01 0.01 0.00 0.00 0.01\n10 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.03 0.18 0.60 0.13 0.04 0.00 0.00 0.00\n11 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.02 0.18 0.56 0.15 0.03 0.01 0.00\n12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.06 0.18 0.55 0.13 0.01 0.01\n13 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.05 0.16 0.57 0.09 0.05\n14 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.03 0.04 0.19 0.61 0.08\n15 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.03 0.04 0.19 0.54\n16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.00 0.01 0.06 0.21\n17 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.01 0.01 0.02 0.07\n18 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.02\n19 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01\n20 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.01 0.01\n21 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00\n22 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n23 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00\n24 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n25 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n26 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n27 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n28 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n29 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n30 0.00 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n31 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00\n32 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n33 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n34 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n35 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n36 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n37 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n38 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n39 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n40 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n     16   17   18   19   20   21   22   23   24   25   26   27   28   29   30\n1  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n7  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n8  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n9  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n10 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n11 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n12 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n13 0.01 0.02 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n14 0.02 0.01 0.01 0.01 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n15 0.12 0.04 0.01 0.01 0.00 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n16 0.52 0.14 0.04 0.01 0.00 0.00 0.00 0.01 0.00 0.01 0.00 0.00 0.00 0.00 0.00\n17 0.25 0.53 0.09 0.00 0.02 0.00 0.01 0.00 0.01 0.00 0.01 0.00 0.01 0.00 0.00\n18 0.03 0.22 0.56 0.10 0.04 0.01 0.01 0.01 0.00 0.00 0.00 0.01 0.00 0.01 0.00\n19 0.03 0.04 0.21 0.55 0.09 0.03 0.01 0.02 0.00 0.00 0.00 0.01 0.00 0.01 0.00\n20 0.01 0.01 0.06 0.21 0.54 0.12 0.01 0.02 0.00 0.01 0.00 0.00 0.00 0.00 0.00\n21 0.00 0.01 0.01 0.09 0.16 0.55 0.11 0.03 0.01 0.01 0.01 0.01 0.00 0.01 0.00\n22 0.01 0.00 0.01 0.03 0.09 0.18 0.49 0.11 0.02 0.01 0.03 0.00 0.00 0.00 0.01\n23 0.00 0.00 0.01 0.01 0.03 0.09 0.19 0.46 0.14 0.02 0.03 0.01 0.01 0.01 0.01\n24 0.00 0.00 0.00 0.01 0.02 0.02 0.11 0.23 0.41 0.12 0.00 0.03 0.01 0.01 0.02\n25 0.00 0.00 0.00 0.00 0.01 0.00 0.03 0.07 0.26 0.44 0.10 0.02 0.02 0.01 0.01\n26 0.00 0.00 0.00 0.00 0.01 0.01 0.01 0.02 0.08 0.24 0.48 0.08 0.03 0.01 0.02\n27 0.00 0.00 0.00 0.00 0.01 0.01 0.01 0.02 0.03 0.11 0.17 0.48 0.09 0.04 0.01\n28 0.00 0.00 0.01 0.00 0.00 0.00 0.01 0.02 0.01 0.03 0.15 0.16 0.48 0.08 0.03\n29 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.01 0.02 0.01 0.02 0.11 0.17 0.45 0.12\n30 0.00 0.00 0.00 0.01 0.00 0.00 0.01 0.00 0.01 0.01 0.01 0.05 0.14 0.21 0.37\n31 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.01 0.01 0.01 0.02 0.12 0.24\n32 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.00 0.00 0.01 0.03 0.02 0.11\n33 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.01 0.00 0.01 0.03\n34 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.02\n35 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.01 0.01\n36 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.02\n37 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.00 0.00\n38 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.00\n39 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.00\n40 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n     31   32   33   34   35   36   37   38   39   40\n1  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n7  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n8  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n9  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n10 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n11 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n13 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n14 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n15 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n16 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.00 0.00 0.00\n17 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n18 0.00 0.00 0.00 0.00 0.01 0.00 0.01 0.01 0.00 0.00\n19 0.01 0.00 0.00 0.00 0.01 0.00 0.00 0.00 0.00 0.00\n20 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n21 0.01 0.00 0.01 0.00 0.00 0.01 0.00 0.00 0.00 0.00\n22 0.00 0.01 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n23 0.01 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.00\n24 0.01 0.02 0.00 0.00 0.00 0.00 0.01 0.00 0.01 0.00\n25 0.00 0.00 0.01 0.01 0.01 0.00 0.01 0.00 0.00 0.01\n26 0.01 0.00 0.01 0.00 0.00 0.00 0.01 0.00 0.00 0.00\n27 0.02 0.01 0.00 0.01 0.00 0.00 0.00 0.00 0.01 0.01\n28 0.01 0.01 0.01 0.01 0.01 0.00 0.01 0.00 0.00 0.00\n29 0.04 0.00 0.01 0.01 0.01 0.01 0.01 0.00 0.00 0.00\n30 0.08 0.05 0.03 0.01 0.01 0.01 0.00 0.00 0.00 0.00\n31 0.42 0.09 0.03 0.01 0.01 0.01 0.01 0.01 0.00 0.00\n32 0.22 0.40 0.11 0.04 0.02 0.03 0.00 0.00 0.01 0.00\n33 0.13 0.23 0.43 0.09 0.03 0.01 0.02 0.01 0.01 0.00\n34 0.04 0.11 0.21 0.43 0.10 0.06 0.02 0.01 0.00 0.00\n35 0.01 0.05 0.10 0.27 0.41 0.05 0.05 0.01 0.01 0.01\n36 0.02 0.05 0.04 0.11 0.21 0.36 0.16 0.02 0.02 0.00\n37 0.00 0.01 0.02 0.06 0.11 0.33 0.36 0.06 0.01 0.02\n38 0.01 0.00 0.01 0.06 0.06 0.12 0.19 0.49 0.03 0.01\n39 0.00 0.00 0.03 0.00 0.07 0.03 0.07 0.30 0.45 0.03\n40 0.00 0.00 0.00 0.00 0.00 0.05 0.00 0.32 0.21 0.42\n\n\n\nall_2024_250_placecat &lt;- all_2024_complete |&gt;\n  filter(class == \"250\") |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place, place_next) |&gt;\n  select(place, place_next) |&gt;\n  mutate(place_cat = ifelse(place &gt;= 1 & place &lt;= 5, \"1-5\",\n                     ifelse(place &gt;= 6 & place &lt;= 10, \"6-10\",\n                     ifelse(place &gt;= 11 & place &lt;= 15, \"11-15\",\n                     ifelse(place &gt;= 16 & place &lt;= 20, \"16-20\",\n                     ifelse(place &gt;= 21 & place &lt;= 25, \"21-25\",\n                     ifelse(place &gt;= 26 & place &lt;= 30, \"26-30\",\n                     ifelse(place &gt;= 31 & place &lt;= 35,\n                            \"31-35\", \"36-40\"))))))),\n         place_next_cat = ifelse(place_next &gt;= 1 & place_next &lt;= 5, \"1-5\",\n                          ifelse(place_next &gt;= 6 & place_next &lt;= 10,\n                                 \"6-10\",\n                          ifelse(place_next &gt;= 11 & place_next &lt;= 15, \n                                 \"11-15\",\n                          ifelse(place_next &gt;= 16 & place_next &lt;= 20, \n                                 \"16-20\",\n                          ifelse(place_next &gt;= 21 & place_next &lt;= 25, \n                                 \"21-25\", \n                          ifelse(place_next &gt;= 26 & place_next &lt;= 30, \n                                 \"26-30\",\n                          ifelse(place_next &gt;= 31 & place_next &lt;= 35,\n                                 \"31-35\", \"36-40\")))))))) |&gt;\n  select(place_cat, place_next_cat) |&gt;\n  group_by(place_cat, place_next_cat) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_250_placecat2 &lt;- all_2024_250_placecat |&gt;\n  group_by(place_cat) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_250_placecat &lt;- all_2024_250_placecat |&gt;\n  left_join(all_2024_250_placecat2) |&gt;\n  mutate(prob = n/total)\n\nrows2 = 8\ncols2 = 8\ncats2 &lt;- c(\"1-5\", \"6-10\", \"11-15\", \"16-20\", \"21-25\", \"26-30\",\n           \"31-35\", \"36-40\")\n\nmatrix250_2 &lt;- matrix(0, nrow = rows2, ncol = cols2)\nfor (i in 1:rows2) {\n  for (j in 1:cols2) {\n    matrix_row &lt;- all_2024_250_placecat |&gt;\n      filter(place_cat == cats2[i] & place_next_cat == cats2[j])\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_250_placecat |&gt; \n        filter(place_cat == cats2[i] & place_next_cat == cats2[j]) |&gt; pull(prob)\n    }\n    matrix250_2[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix250_2) &lt;- cats2\ncolnames(matrix250_2) &lt;- cats2\nprint(round(matrix250_2, 3))\n\n        1-5  6-10 11-15 16-20 21-25 26-30 31-35 36-40\n1-5   0.957 0.040 0.001 0.000 0.000 0.000 0.001 0.001\n6-10  0.046 0.891 0.057 0.001 0.000 0.000 0.004 0.001\n11-15 0.000 0.073 0.862 0.055 0.007 0.000 0.000 0.002\n16-20 0.000 0.002 0.083 0.848 0.050 0.007 0.005 0.005\n21-25 0.000 0.000 0.002 0.095 0.818 0.063 0.015 0.007\n26-30 0.001 0.000 0.000 0.005 0.128 0.796 0.061 0.009\n31-35 0.000 0.000 0.001 0.000 0.006 0.143 0.792 0.058\n36-40 0.000 0.000 0.000 0.000 0.000 0.016 0.241 0.743\n\n\nLastly, let’s apply the same analysis to the WMX class.\n\nall_2024_wmx_add &lt;- all_2024_complete |&gt;\n  filter(class == \"WMX\") |&gt;\n  drop_na(place) |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place, place_next) |&gt;\n  select(place, place_next) |&gt;\n  group_by(place, place_next) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_wmx_add2 &lt;- all_2024_wmx_add |&gt;\n  group_by(place) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_wmx_add &lt;- all_2024_wmx_add |&gt;\n  left_join(all_2024_wmx_add2) |&gt;\n  mutate(prob = n/total)\n\nrows = 30\ncols = 30\ncats &lt;- 1:30\n\nmatrixwmx_1 &lt;- matrix(0, nrow = rows, ncol = cols)\nfor (i in 1:rows) {\n  for (j in 1:cols) {\n    matrix_row &lt;- all_2024_wmx_add |&gt; \n      filter(place == i & place_next == j)\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_wmx_add |&gt; \n        filter(place == i & place_next == j) |&gt; pull(prob)\n    }\n    matrixwmx_1[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrixwmx_1) &lt;- cats\ncolnames(matrixwmx_1) &lt;- cats\nprint(round(matrixwmx_1, 2))\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16\n1  1 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0 0.92 0.06 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0 0.05 0.85 0.06 0.03 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0 0.03 0.07 0.75 0.10 0.01 0.01 0.00 0.01 0.00 0.00 0.01 0.00 0.00 0.00 0.00\n5  0 0.00 0.01 0.13 0.77 0.09 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0 0.00 0.00 0.04 0.10 0.68 0.14 0.01 0.01 0.00 0.01 0.00 0.00 0.01 0.00 0.00\n7  0 0.00 0.00 0.01 0.01 0.19 0.62 0.12 0.01 0.00 0.00 0.00 0.00 0.01 0.00 0.00\n8  0 0.00 0.00 0.00 0.00 0.03 0.16 0.66 0.11 0.03 0.00 0.01 0.00 0.00 0.00 0.00\n9  0 0.00 0.00 0.00 0.00 0.00 0.04 0.12 0.66 0.10 0.05 0.00 0.01 0.00 0.00 0.00\n10 0 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.09 0.66 0.12 0.03 0.03 0.01 0.00 0.00\n11 0 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.07 0.13 0.58 0.11 0.05 0.03 0.00 0.00\n12 0 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.03 0.07 0.16 0.52 0.14 0.03 0.01 0.03\n13 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.07 0.24 0.53 0.12 0.00 0.03\n14 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.06 0.13 0.60 0.12 0.03\n15 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.20 0.62 0.06\n16 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.03 0.03 0.08 0.63\n17 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.11 0.17\n18 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03\n19 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03\n20 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.03 0.00\n21 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.04 0.00 0.04 0.00\n22 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n23 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.12 0.00 0.00 0.00\n24 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.07 0.00 0.00 0.00 0.00\n25 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n26 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n27 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n28 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.12 0.00\n29 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n30 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n     17   18   19   20   21   22   23   24   25   26   27   28   29 30\n1  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n2  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n3  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n5  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n6  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n7  0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n8  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n9  0.00 0.00 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n10 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n11 0.00 0.00 0.01 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n13 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n14 0.00 0.03 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n15 0.00 0.02 0.00 0.02 0.00 0.02 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n16 0.11 0.05 0.00 0.03 0.03 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n17 0.54 0.11 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n18 0.27 0.47 0.07 0.10 0.03 0.00 0.03 0.00 0.00 0.00 0.00 0.00 0.00  0\n19 0.00 0.13 0.57 0.13 0.03 0.03 0.00 0.03 0.00 0.00 0.00 0.00 0.03  0\n20 0.07 0.07 0.13 0.43 0.13 0.07 0.07 0.00 0.00 0.00 0.00 0.00 0.00  0\n21 0.00 0.04 0.04 0.14 0.57 0.11 0.00 0.00 0.04 0.00 0.00 0.00 0.00  0\n22 0.00 0.00 0.04 0.12 0.16 0.60 0.00 0.04 0.00 0.00 0.00 0.04 0.00  0\n23 0.00 0.00 0.00 0.06 0.06 0.12 0.50 0.12 0.00 0.00 0.00 0.00 0.00  0\n24 0.07 0.00 0.00 0.00 0.00 0.07 0.14 0.43 0.07 0.07 0.07 0.00 0.00  0\n25 0.00 0.00 0.08 0.00 0.00 0.00 0.08 0.17 0.58 0.08 0.00 0.00 0.00  0\n26 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.38 0.25 0.38 0.00 0.00  0\n27 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.25 0.50 0.25 0.00  0\n28 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.25 0.00 0.38 0.25  0\n29 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.12 0.00 0.00 0.00 0.25 0.62  0\n30 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  1\n\n\n\nall_2024_wmx_placecat &lt;- all_2024_complete |&gt;\n  filter(class == \"WMX\") |&gt;\n  drop_na(place) |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place, place_next) |&gt;\n  select(place, place_next) |&gt;\n  mutate(place_cat = ifelse(place &gt;= 1 & place &lt;= 5, \"1-5\",\n                     ifelse(place &gt;= 6 & place &lt;= 10, \"6-10\",\n                     ifelse(place &gt;= 11 & place &lt;= 15, \"11-15\",\n                     ifelse(place &gt;= 16 & place &lt;= 20, \"16-20\",\n                     ifelse(place &gt;= 21 & place &lt;= 25, \n                            \"21-25\",\"26-30\"))))),\n         place_next_cat = ifelse(place_next &gt;= 1 & place_next &lt;= 5, \"1-5\",\n                          ifelse(place_next &gt;= 6 & place_next &lt;= 10,\n                                 \"6-10\",\n                          ifelse(place_next &gt;= 11 & place_next &lt;= 15, \n                                 \"11-15\",\n                          ifelse(place_next &gt;= 16 & place_next &lt;= 20, \n                                 \"16-20\",\n                          ifelse(place_next &gt;= 21 & place_next &lt;= 25, \n                                 \"21-25\", \"26-30\")))))) |&gt;\n  select(place_cat, place_next_cat) |&gt;\n  group_by(place_cat, place_next_cat) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_wmx_placecat2 &lt;- all_2024_wmx_placecat |&gt;\n  group_by(place_cat) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_wmx_placecat &lt;- all_2024_wmx_placecat |&gt;\n  left_join(all_2024_wmx_placecat2) |&gt;\n  mutate(prob = n/total)\n\nrows2 = 6\ncols2 = 6\ncats2 &lt;- c(\"1-5\", \"6-10\", \"11-15\", \"16-20\", \"21-25\", \"26-30\")\n\nmatrixwmx_2 &lt;- matrix(0, nrow = rows2, ncol = cols2)\nfor (i in 1:rows2) {\n  for (j in 1:cols2) {\n    matrix_row &lt;- all_2024_wmx_placecat |&gt;\n      filter(place_cat == cats2[i] & place_next_cat == cats2[j])\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_wmx_placecat |&gt; \n        filter(place_cat == cats2[i] & place_next_cat == cats2[j]) |&gt; pull(prob)\n    }\n    matrixwmx_2[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrixwmx_2) &lt;- cats2\ncolnames(matrixwmx_2) &lt;- cats2\nprint(round(matrixwmx_2, 3))\n\n        1-5  6-10 11-15 16-20 21-25 26-30\n1-5   0.970 0.028 0.003 0.000 0.000 0.000\n6-10  0.033 0.904 0.058 0.005 0.000 0.000\n11-15 0.000 0.080 0.876 0.041 0.003 0.000\n16-20 0.000 0.000 0.067 0.840 0.086 0.006\n21-25 0.000 0.000 0.053 0.137 0.768 0.042\n26-30 0.000 0.000 0.029 0.000 0.114 0.857\n\n\nSo, what is the probability of going from 6-10 to 1-5 on any given lap for each class?\n450: 0.033\n250: 0.046\nWMX: 0.033\nIt appears that is easiest to move into the top 5 in the 250 class with a probability of 4.3%. It is hardest in the WMX class, where there is a 2.8% chance.\nHere is a visual way to represent these transition matrices:\n\ntm_450 &lt;- as.data.frame(as.table(matrix450_2))\nggplot(tm_450, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"#da3a32\") +\n  geom_text(aes(label = round(Freq,2))) +\n  labs(title = \"State Probabilities - 450 Heatmap\", x = \"From \", \n       y = \"To\", fill = \"Probability\")\n\n\n\n\n\n\n\n\n\ntm_250 &lt;- as.data.frame(as.table(matrix250_2))\nggplot(tm_250, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"#da3a32\") +\n  geom_text(aes(label = round(Freq,2))) +\n  labs(title = \"State Probabilities - 250 Heatmap\", x = \"From \", \n       y = \"To\", fill = \"Probability\")\n\n\n\n\n\n\n\n\n\ntm_wmx &lt;- as.data.frame(as.table(matrixwmx_2))\nggplot(tm_wmx, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"#da3a32\") +\n  geom_text(aes(label = round(Freq,2))) +\n  labs(title = \"State Probabilities - WMX Heatmap\", x = \"From \", \n       y = \"To\", fill = \"Probability\")\n\n\n\n\n\n\n\n\nQ2: What is the probability of going from one place group to another over the course of x laps?\nWe can let x be any positive integer. As an example, we will consider the probabilities over the course of 5 laps.\n\nx = 5\n\n450 class:\n\nround(matrix450_2 %^% x, 2)\n\n       1-5 6-10 11-15 16-20 21-25 26-30\n1-5   0.87 0.11  0.01  0.00  0.00  0.00\n6-10  0.14 0.73  0.11  0.02  0.01  0.00\n11-15 0.01 0.14  0.63  0.17  0.03  0.01\n16-20 0.00 0.02  0.22  0.55  0.15  0.05\n21-25 0.00 0.00  0.04  0.24  0.56  0.16\n26-30 0.00 0.00  0.01  0.08  0.41  0.51\n\n\n250 class:\n\nround(matrix250_2 %^% x, 2)\n\n       1-5 6-10 11-15 16-20 21-25 26-30 31-35 36-40\n1-5   0.82 0.15  0.02  0.00  0.00  0.00  0.01  0.00\n6-10  0.17 0.61  0.17  0.02  0.00  0.00  0.01  0.00\n11-15 0.03 0.22  0.53  0.16  0.04  0.01  0.01  0.01\n16-20 0.00 0.05  0.23  0.50  0.14  0.04  0.03  0.02\n21-25 0.00 0.01  0.05  0.24  0.44  0.16  0.07  0.03\n26-30 0.00 0.00  0.01  0.08  0.29  0.41  0.16  0.04\n31-35 0.00 0.00  0.00  0.02  0.11  0.32  0.43  0.12\n36-40 0.00 0.00  0.00  0.01  0.05  0.20  0.46  0.29\n\n\nWMX class:\n\nround(matrixwmx_2 %^% x, 2)\n\n       1-5 6-10 11-15 16-20 21-25 26-30\n1-5   0.87 0.11  0.02  0.00  0.00  0.00\n6-10  0.13 0.65  0.19  0.03  0.01  0.00\n11-15 0.02 0.26  0.57  0.12  0.03  0.00\n16-20 0.00 0.04  0.22  0.50  0.20  0.04\n21-25 0.00 0.03  0.19  0.32  0.36  0.10\n26-30 0.00 0.02  0.13  0.10  0.26  0.49\n\n\nQ3: Do these state change probabilities themselves change over the course of a moto?\nTo narrow the focus of this problem, we will consider how the probability of staying in 1-5 position group changes throughout a moto.\n\nall_2024_placecat_laps &lt;- all_2024_complete |&gt;\n  drop_na(place) |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place_next) |&gt;\n  select(place, place_next, lap, class) |&gt;\n  mutate(place_cat = ifelse(place &gt;= 1 & place &lt;= 5, \"1-5\",\n                     ifelse(place &gt;= 6 & place &lt;= 10, \"6-10\",\n                     ifelse(place &gt;= 11 & place &lt;= 15, \"11-15\",\n                     ifelse(place &gt;= 16 & place &lt;= 20, \"16-20\",\n                     ifelse(place &gt;= 21 & place &lt;= 25, \"21-25\",\n                     ifelse(place &gt;= 26 & place &lt;= 30, \"26-30\",\n                     ifelse(place &gt;= 31 & place &lt;= 35, \"31-35\",\n                            \"36-40\"))))))),\n         place_next_cat = ifelse(place_next &gt;= 1 & place_next &lt;= 5, \"1-5\",\n                          ifelse(place_next &gt;= 6 & place_next &lt;= 10,\n                                 \"6-10\",\n                          ifelse(place_next &gt;= 11 & place_next &lt;= 15, \n                                 \"11-15\",\n                          ifelse(place_next &gt;= 16 & place_next &lt;= 20, \n                                 \"16-20\",\n                          ifelse(place_next &gt;= 21 & place_next &lt;= 25, \n                                 \"21-25\", \n                          ifelse(place_next &gt;= 26 & place_next &lt;= 30,\n                                 \"26-30\",\n                          ifelse(place_next &gt;= 31 & place_next &lt;= 35,\n                                 \"31-35\", \"36-40\")))))))) |&gt;\n  select(place_cat, place_next_cat, lap, class) |&gt;\n  group_by(place_cat, place_next_cat, lap, class) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_placecat_laps2 &lt;- all_2024_placecat_laps |&gt;\n  group_by(class, lap, place_cat) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_placecat_laps3 &lt;- all_2024_placecat_laps |&gt;\n  left_join(all_2024_placecat_laps2) |&gt;\n  mutate(prob = n/total) |&gt;\n  filter(place_cat == \"1-5\" & place_next_cat == \"1-5\")\n\nall_2024_placecat_laps3 |&gt;\n  ggplot(aes(x = lap, y = prob, color = class)) +\n  geom_line() +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  labs(x = \"Lap\", y = \"Probability of Retaining 1-5\", color = \"Class\")\n\n\n\n\n\n\n\n\nThe bold line is the line of best fit from local polynomial regression. A big takeaway from this visual is that it usually becomes less probable of changing positions the longer the race goes on. This makes sense as gaps begin to open up.\nQ4: What is the probability of going from place X on the first lap to finishing the moto in place Y?\n450 class:\n\nall_2024_450_start_finish &lt;- all_2024_complete |&gt;\n  filter(class == \"450\" & lap == 1) |&gt;\n  select(place, finish)\n\nall_2024_450_start_finish_sum &lt;- all_2024_450_start_finish |&gt;\n  group_by(place, finish) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_450_start_finish_sum_2 &lt;- all_2024_450_start_finish_sum |&gt;\n  group_by(place) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_450_start_finish_sum_3 &lt;- all_2024_450_start_finish_sum |&gt;\n  left_join(all_2024_450_start_finish_sum_2) |&gt;\n  mutate(prob = n/total)\n\nrows = 30\ncols = 30\ncats &lt;- 1:30\n\nmatrix450_3 &lt;- matrix(0, nrow = rows, ncol = cols)\nfor (i in 1:rows) {\n  for (j in 1:cols) {\n    matrix_row &lt;- all_2024_450_start_finish_sum_3 |&gt; \n      filter(place == i & finish == j)\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_450_start_finish_sum_3 |&gt; \n        filter(place == i & finish == j) |&gt; pull(prob)\n    }\n    matrix450_3[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix450_3) &lt;- cats\ncolnames(matrix450_3) &lt;- cats\nprint(round(matrix450_3, 2))\n\n      1    2    3    4    5    6    7    8    9   10   11   12   13   14   15\n1  0.50 0.31 0.06 0.00 0.06 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00\n2  0.31 0.25 0.31 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.12 0.31 0.06 0.00 0.06 0.06 0.06 0.06 0.00 0.00 0.06 0.00 0.00 0.06 0.00\n4  0.06 0.12 0.12 0.19 0.19 0.00 0.12 0.12 0.00 0.00 0.00 0.06 0.00 0.00 0.00\n5  0.00 0.00 0.25 0.06 0.00 0.19 0.06 0.06 0.06 0.12 0.00 0.00 0.06 0.00 0.06\n6  0.00 0.00 0.00 0.19 0.06 0.38 0.00 0.12 0.06 0.00 0.00 0.00 0.06 0.00 0.00\n7  0.00 0.00 0.00 0.12 0.19 0.19 0.19 0.00 0.00 0.12 0.00 0.06 0.00 0.00 0.06\n8  0.00 0.00 0.06 0.06 0.06 0.06 0.25 0.06 0.25 0.06 0.00 0.00 0.00 0.00 0.00\n9  0.00 0.00 0.06 0.06 0.06 0.06 0.06 0.12 0.12 0.19 0.06 0.06 0.00 0.00 0.06\n10 0.00 0.00 0.00 0.06 0.06 0.00 0.06 0.06 0.06 0.12 0.12 0.06 0.00 0.06 0.00\n11 0.00 0.00 0.00 0.12 0.00 0.00 0.00 0.06 0.19 0.00 0.12 0.00 0.00 0.00 0.31\n12 0.00 0.00 0.00 0.00 0.06 0.00 0.06 0.12 0.12 0.06 0.12 0.00 0.12 0.06 0.00\n13 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.06 0.00 0.12 0.12 0.12 0.00\n14 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.06 0.00 0.12 0.12 0.19 0.12 0.06\n15 0.00 0.00 0.00 0.00 0.12 0.00 0.00 0.00 0.00 0.00 0.12 0.00 0.00 0.06 0.12\n16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.19 0.06 0.12 0.06\n17 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.12 0.00 0.12 0.12 0.00 0.06\n18 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.06 0.06 0.06 0.06 0.00 0.00 0.06 0.00\n19 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.06 0.06\n20 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.00\n21 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.00 0.00\n22 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.12\n23 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n24 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00\n25 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n26 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.00\n27 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.07 0.00 0.00\n28 0.00 0.00 0.00 0.00 0.00 0.08 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n29 0.00 0.00 0.00 0.00 0.00 0.00 0.09 0.00 0.00 0.00 0.09 0.00 0.00 0.09 0.00\n30 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n     16   17   18   19   20   21   22   23   24   25   26   27   28   29   30\n1  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00\n3  0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.06 0.00 0.00\n7  0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n8  0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00\n9  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06\n10 0.00 0.12 0.00 0.00 0.06 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00\n11 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.06 0.00 0.06 0.00 0.00 0.00\n12 0.06 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.00 0.00\n13 0.12 0.00 0.06 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.12 0.00 0.00 0.00\n14 0.00 0.00 0.00 0.12 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n15 0.00 0.06 0.12 0.12 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.12\n16 0.31 0.06 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00\n17 0.06 0.06 0.00 0.00 0.00 0.12 0.00 0.12 0.06 0.00 0.12 0.00 0.00 0.00 0.00\n18 0.06 0.12 0.12 0.06 0.06 0.12 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00\n19 0.12 0.12 0.00 0.06 0.00 0.06 0.12 0.00 0.00 0.06 0.00 0.06 0.00 0.06 0.06\n20 0.06 0.06 0.12 0.06 0.12 0.00 0.06 0.06 0.00 0.19 0.00 0.00 0.12 0.00 0.00\n21 0.00 0.00 0.06 0.12 0.00 0.12 0.12 0.12 0.00 0.12 0.00 0.06 0.06 0.06 0.00\n22 0.06 0.00 0.06 0.06 0.19 0.06 0.06 0.06 0.06 0.00 0.06 0.00 0.00 0.06 0.06\n23 0.06 0.00 0.00 0.12 0.00 0.19 0.00 0.12 0.06 0.12 0.12 0.06 0.06 0.00 0.00\n24 0.00 0.00 0.12 0.00 0.12 0.06 0.12 0.12 0.00 0.06 0.19 0.00 0.06 0.06 0.00\n25 0.06 0.12 0.06 0.12 0.00 0.00 0.06 0.00 0.38 0.00 0.12 0.06 0.00 0.00 0.00\n26 0.00 0.00 0.06 0.00 0.06 0.00 0.12 0.19 0.06 0.12 0.00 0.06 0.00 0.19 0.00\n27 0.00 0.00 0.07 0.00 0.13 0.00 0.07 0.07 0.20 0.20 0.00 0.13 0.00 0.07 0.00\n28 0.00 0.15 0.08 0.00 0.08 0.08 0.15 0.00 0.15 0.00 0.08 0.08 0.00 0.08 0.00\n29 0.00 0.00 0.09 0.00 0.00 0.00 0.09 0.00 0.00 0.00 0.09 0.09 0.09 0.18 0.09\n30 0.00 0.00 0.00 0.00 0.14 0.00 0.00 0.14 0.14 0.00 0.14 0.14 0.14 0.00 0.14\n\nall_2024_450_start_finish_cat &lt;- all_2024_complete |&gt;\n  filter(class == \"450\" & lap == 1) |&gt;\n  select(place, finish) |&gt;\n  mutate(place_cat = ifelse(place &gt;= 1 & place &lt;= 5, \"1-5\",\n                           ifelse(place &gt;= 6 & place &lt;= 10, \"6-10\",\n                           ifelse(place &gt;= 11 & place &lt;= 15, \"11-15\",\n                           ifelse(place &gt;= 16 & place &lt;= 20, \"16-20\",\n                           ifelse(place &gt;= 21 & place &lt;= 25, \n                                  \"21-25\",\"26-30\"))))),\n         finish_cat = ifelse(finish &gt;= 1 & finish &lt;= 5, \"1-5\",\n                      ifelse(finish &gt;= 6 & finish &lt;= 10, \"6-10\",\n                      ifelse(finish &gt;= 11 & finish &lt;= 15, \"11-15\",\n                      ifelse(finish &gt;= 16 & finish &lt;= 20, \"16-20\",\n                      ifelse(finish &gt;= 21 & finish &lt;= 25, \"21-25\", \n                             \"26-30\")))))) |&gt;\n  select(place_cat, finish_cat) |&gt;\n  group_by(place_cat, finish_cat) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_450_start_finish_cat_2 &lt;- all_2024_450_start_finish_cat |&gt;\n  group_by(place_cat) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_450_start_finish_cat_3 &lt;- all_2024_450_start_finish_cat |&gt;\n  left_join(all_2024_450_start_finish_cat_2) |&gt;\n  mutate(prob = n/total)\n\nrows2 = 6\ncols2 = 6\ncats2 &lt;- c(\"1-5\", \"6-10\", \"11-15\", \"16-20\", \"21-25\", \"26-30\")\n\nmatrix450_4 &lt;- matrix(0, nrow = rows2, ncol = cols2)\nfor (i in 1:rows2) {\n  for (j in 1:cols2) {\n    matrix_row &lt;- all_2024_450_start_finish_cat_3 |&gt;\n      filter(place_cat == cats2[i] & finish_cat == cats2[j])\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_450_start_finish_cat_3 |&gt; \n        filter(place_cat == cats2[i] & finish_cat == cats2[j]) |&gt; pull(prob)\n    }\n    matrix450_4[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix450_4) &lt;- cats2\ncolnames(matrix450_4) &lt;- cats2\nprint(round(matrix450_4, 3))\n\n        1-5  6-10 11-15 16-20 21-25 26-30\n1-5   0.688 0.200 0.062 0.025 0.000 0.025\n6-10  0.212 0.525 0.125 0.050 0.025 0.062\n11-15 0.075 0.188 0.412 0.175 0.038 0.112\n16-20 0.013 0.062 0.262 0.338 0.225 0.100\n21-25 0.013 0.000 0.075 0.275 0.412 0.225\n26-30 0.000 0.032 0.081 0.177 0.387 0.323\n\nsf_450 &lt;- as.data.frame(as.table(matrix450_4))\nggplot(sf_450, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"#da3a32\") +\n  geom_text(aes(label = round(Freq,2))) +\n  labs(title = \"450 Heatmap\", x = \"Start \", y = \"Finish\",\n       fill = \"Probability\")\n\n\n\n\n\n\n\n\n250 class:\n\nall_2024_250_start_finish &lt;- all_2024_complete |&gt;\n  filter(class == \"250\" & lap == 1) |&gt;\n  select(place, finish)\n\nall_2024_250_start_finish_sum &lt;- all_2024_250_start_finish |&gt;\n  group_by(place, finish) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_250_start_finish_sum_2 &lt;- all_2024_250_start_finish_sum |&gt;\n  group_by(place) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_250_start_finish_sum_3 &lt;- all_2024_250_start_finish_sum |&gt;\n  left_join(all_2024_250_start_finish_sum_2) |&gt;\n  mutate(prob = n/total)\n\nrows = 40\ncols = 40\ncats &lt;- 1:40\n\nmatrix250_3 &lt;- matrix(0, nrow = rows, ncol = cols)\nfor (i in 1:rows) {\n  for (j in 1:cols) {\n    matrix_row &lt;- all_2024_250_start_finish_sum_3 |&gt; \n      filter(place == i & finish == j)\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_250_start_finish_sum_3 |&gt; \n        filter(place == i & finish == j) |&gt; pull(prob)\n    }\n    matrix250_3[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix250_3) &lt;- cats\ncolnames(matrix250_3) &lt;- cats\nprint(round(matrix250_3, 2))\n\n      1    2    3    4    5    6    7    8    9   10   11   12   13   14   15\n1  0.56 0.25 0.06 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.25 0.25 0.12 0.12 0.00 0.00 0.06 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.06 0.19 0.38 0.06 0.00 0.06 0.12 0.06 0.00 0.00 0.00 0.06 0.00 0.00 0.00\n4  0.00 0.12 0.12 0.12 0.25 0.06 0.00 0.06 0.00 0.19 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.06 0.00 0.06 0.06 0.19 0.00 0.06 0.06 0.00 0.06 0.06 0.19 0.00 0.06\n6  0.00 0.00 0.19 0.06 0.19 0.19 0.00 0.06 0.12 0.06 0.00 0.06 0.00 0.00 0.00\n7  0.00 0.06 0.00 0.06 0.19 0.12 0.06 0.12 0.06 0.06 0.06 0.00 0.00 0.00 0.00\n8  0.06 0.00 0.00 0.06 0.06 0.00 0.00 0.00 0.06 0.06 0.06 0.12 0.00 0.25 0.06\n9  0.00 0.00 0.00 0.19 0.06 0.00 0.06 0.19 0.06 0.06 0.06 0.00 0.00 0.06 0.06\n10 0.00 0.00 0.06 0.06 0.06 0.00 0.06 0.12 0.12 0.06 0.00 0.06 0.12 0.12 0.00\n11 0.00 0.00 0.00 0.00 0.06 0.00 0.19 0.06 0.06 0.00 0.00 0.00 0.12 0.06 0.12\n12 0.00 0.00 0.00 0.06 0.00 0.12 0.00 0.06 0.00 0.06 0.12 0.00 0.25 0.00 0.06\n13 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.06 0.12 0.00 0.00 0.06 0.00 0.06 0.12\n14 0.00 0.06 0.00 0.12 0.00 0.00 0.00 0.06 0.00 0.00 0.19 0.25 0.00 0.06 0.00\n15 0.00 0.00 0.06 0.00 0.00 0.00 0.06 0.00 0.12 0.06 0.06 0.12 0.12 0.00 0.19\n16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.19 0.00 0.00 0.12 0.00\n17 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.12 0.12 0.00 0.06 0.00 0.06\n18 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.12 0.00 0.06 0.00 0.06 0.00\n19 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.12\n20 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00\n21 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.06 0.06 0.00 0.06 0.00\n22 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n23 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00\n24 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06\n25 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00\n26 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n27 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n28 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n29 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n30 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00\n31 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n32 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00\n33 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00\n34 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06\n35 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n36 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n37 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n38 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n39 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.11 0.00 0.00 0.00\n40 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n     16   17   18   19   20   21   22   23   24   25   26   27   28   29   30\n1  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00\n5  0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n7  0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n8  0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00\n9  0.12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n10 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n11 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n12 0.00 0.00 0.12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n13 0.12 0.00 0.06 0.00 0.00 0.12 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00\n14 0.00 0.06 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n15 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.00 0.00 0.00 0.00 0.00\n16 0.00 0.06 0.06 0.00 0.06 0.00 0.06 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n17 0.19 0.06 0.00 0.12 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.00 0.00\n18 0.06 0.06 0.12 0.00 0.06 0.00 0.06 0.00 0.00 0.06 0.06 0.00 0.00 0.12 0.06\n19 0.12 0.12 0.00 0.06 0.00 0.06 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.06 0.06\n20 0.00 0.00 0.06 0.00 0.00 0.12 0.12 0.06 0.06 0.00 0.06 0.06 0.00 0.00 0.06\n21 0.12 0.00 0.06 0.12 0.00 0.06 0.06 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n22 0.00 0.12 0.00 0.00 0.19 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.00 0.12 0.00\n23 0.06 0.19 0.06 0.19 0.00 0.00 0.00 0.06 0.06 0.12 0.00 0.06 0.00 0.06 0.00\n24 0.00 0.00 0.06 0.06 0.19 0.00 0.00 0.06 0.00 0.06 0.00 0.12 0.06 0.06 0.00\n25 0.00 0.06 0.12 0.06 0.00 0.12 0.00 0.00 0.12 0.06 0.06 0.00 0.00 0.06 0.00\n26 0.06 0.00 0.06 0.06 0.00 0.12 0.00 0.06 0.00 0.12 0.00 0.12 0.12 0.06 0.06\n27 0.00 0.00 0.00 0.06 0.06 0.06 0.06 0.00 0.06 0.19 0.19 0.06 0.06 0.00 0.00\n28 0.06 0.00 0.00 0.00 0.19 0.06 0.06 0.06 0.06 0.12 0.06 0.00 0.00 0.06 0.06\n29 0.00 0.06 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.06 0.00 0.12 0.00 0.00 0.12\n30 0.00 0.00 0.00 0.00 0.12 0.06 0.06 0.00 0.25 0.00 0.00 0.00 0.00 0.00 0.06\n31 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.06 0.00 0.00 0.12 0.00 0.12 0.00 0.06\n32 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.06 0.06 0.00 0.06 0.06 0.00 0.12 0.00\n33 0.06 0.00 0.00 0.06 0.00 0.00 0.12 0.00 0.06 0.00 0.06 0.00 0.12 0.06 0.00\n34 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.06 0.06 0.06 0.06 0.06 0.12 0.00 0.06\n35 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.19 0.06 0.06\n36 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.06 0.00 0.06 0.00 0.00 0.19\n37 0.00 0.00 0.07 0.00 0.00 0.00 0.07 0.07 0.00 0.00 0.00 0.07 0.07 0.00 0.00\n38 0.00 0.00 0.00 0.08 0.00 0.00 0.15 0.08 0.00 0.00 0.00 0.00 0.08 0.08 0.08\n39 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.11 0.00 0.00 0.11 0.00 0.00 0.11\n40 0.00 0.00 0.00 0.00 0.00 0.00 0.17 0.00 0.00 0.00 0.00 0.00 0.17 0.17 0.00\n     31   32   33   34   35   36   37   38   39   40\n1  0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00\n2  0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.06 0.00 0.00\n3  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n5  0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00\n6  0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00\n7  0.00 0.00 0.00 0.00 0.06 0.06 0.00 0.00 0.00 0.00\n8  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.06\n9  0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00\n10 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00\n11 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.06 0.00 0.06\n12 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.12 0.00\n13 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00\n14 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.06 0.00 0.00\n15 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n16 0.00 0.00 0.06 0.00 0.00 0.00 0.12 0.12 0.00 0.00\n17 0.00 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00\n18 0.00 0.06 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n19 0.00 0.00 0.06 0.00 0.00 0.06 0.12 0.00 0.00 0.00\n20 0.00 0.00 0.00 0.00 0.06 0.12 0.00 0.00 0.06 0.00\n21 0.00 0.06 0.00 0.06 0.06 0.00 0.00 0.00 0.00 0.00\n22 0.00 0.06 0.19 0.00 0.12 0.00 0.00 0.00 0.00 0.00\n23 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n24 0.06 0.00 0.00 0.06 0.00 0.06 0.06 0.00 0.00 0.00\n25 0.00 0.00 0.06 0.06 0.06 0.00 0.00 0.00 0.06 0.00\n26 0.00 0.00 0.06 0.00 0.06 0.00 0.00 0.00 0.00 0.00\n27 0.06 0.00 0.00 0.00 0.00 0.06 0.00 0.06 0.00 0.00\n28 0.06 0.00 0.00 0.00 0.06 0.00 0.00 0.00 0.00 0.00\n29 0.12 0.06 0.00 0.06 0.06 0.00 0.12 0.00 0.00 0.00\n30 0.06 0.12 0.00 0.06 0.06 0.00 0.00 0.00 0.06 0.00\n31 0.00 0.19 0.06 0.06 0.06 0.06 0.00 0.00 0.06 0.00\n32 0.06 0.00 0.00 0.12 0.00 0.12 0.12 0.00 0.00 0.06\n33 0.06 0.12 0.06 0.00 0.00 0.00 0.00 0.12 0.00 0.00\n34 0.06 0.06 0.00 0.06 0.00 0.06 0.12 0.00 0.00 0.00\n35 0.12 0.00 0.00 0.06 0.00 0.12 0.12 0.06 0.00 0.00\n36 0.12 0.12 0.12 0.06 0.00 0.06 0.00 0.06 0.00 0.00\n37 0.00 0.07 0.20 0.13 0.07 0.07 0.07 0.07 0.00 0.00\n38 0.00 0.00 0.08 0.00 0.08 0.00 0.00 0.15 0.08 0.08\n39 0.22 0.11 0.00 0.00 0.00 0.00 0.00 0.00 0.22 0.00\n40 0.00 0.00 0.00 0.17 0.00 0.00 0.00 0.00 0.00 0.33\n\nall_2024_250_start_finish_cat &lt;- all_2024_complete |&gt;\n  filter(class == \"250\" & lap == 1) |&gt;\n  select(place, finish) |&gt;\n  mutate(place_cat = ifelse(place &gt;= 1 & place &lt;= 5, \"1-5\",\n                           ifelse(place &gt;= 6 & place &lt;= 10, \"6-10\",\n                           ifelse(place &gt;= 11 & place &lt;= 15, \"11-15\",\n                           ifelse(place &gt;= 16 & place &lt;= 20, \"16-20\",\n                           ifelse(place &gt;= 21 & place &lt;= 25, \"21-25\",\n                           ifelse(place &gt;= 26 & place &lt;= 30, \"26-30\",\n                           ifelse(place &gt;= 31 & place &lt;= 35, \"31-35\", \n                                  \"36-40\"))))))),\n         finish_cat = ifelse(finish &gt;= 1 & finish &lt;= 5, \"1-5\",\n                      ifelse(finish &gt;= 6 & finish &lt;= 10, \"6-10\",\n                      ifelse(finish &gt;= 11 & finish &lt;= 15, \"11-15\",\n                      ifelse(finish &gt;= 16 & finish &lt;= 20, \"16-20\",\n                      ifelse(finish &gt;= 21 & finish &lt;= 25, \"21-25\", \n                      ifelse(finish &gt;= 26 & finish &lt;= 30, \"26-30\",\n                      ifelse(finish &gt;= 31 & finish &lt;= 35, \"31-35\", \n                             \"36-40\")))))))) |&gt;\n  select(place_cat, finish_cat) |&gt;\n  group_by(place_cat, finish_cat) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_250_start_finish_cat_2 &lt;- all_2024_250_start_finish_cat |&gt;\n  group_by(place_cat) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_250_start_finish_cat_3 &lt;- all_2024_250_start_finish_cat |&gt;\n  left_join(all_2024_250_start_finish_cat_2) |&gt;\n  mutate(prob = n/total)\n\nrows2 = 8\ncols2 = 8\ncats2 &lt;- c(\"1-5\", \"6-10\", \"11-15\", \"16-20\", \n           \"21-25\", \"26-30\", \"31-35\", \"36-40\")\n\nmatrix250_4 &lt;- matrix(0, nrow = rows2, ncol = cols2)\nfor (i in 1:rows2) {\n  for (j in 1:cols2) {\n    matrix_row &lt;- all_2024_250_start_finish_cat_3 |&gt;\n      filter(place_cat == cats2[i] & finish_cat == cats2[j])\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_250_start_finish_cat_3 |&gt; \n        filter(place_cat == cats2[i] & finish_cat == cats2[j]) |&gt; pull(prob)\n    }\n    matrix250_4[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrix250_4) &lt;- cats2\ncolnames(matrix250_4) &lt;- cats2\nprint(round(matrix250_4, 3))\n\n        1-5  6-10 11-15 16-20 21-25 26-30 31-35 36-40\n1-5   0.625 0.212 0.088 0.013 0.000 0.013 0.025 0.025\n6-10  0.275 0.350 0.225 0.062 0.000 0.013 0.038 0.038\n11-15 0.075 0.238 0.400 0.100 0.075 0.013 0.025 0.075\n16-20 0.000 0.100 0.175 0.250 0.162 0.125 0.062 0.125\n21-25 0.013 0.050 0.062 0.338 0.188 0.138 0.175 0.038\n26-30 0.000 0.038 0.000 0.162 0.312 0.238 0.188 0.062\n31-35 0.000 0.013 0.038 0.050 0.150 0.300 0.238 0.212\n36-40 0.017 0.000 0.017 0.034 0.153 0.220 0.339 0.220\n\nsf_250 &lt;- as.data.frame(as.table(matrix250_4))\nggplot(sf_250, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"#da3a32\") +\n  geom_text(aes(label = round(Freq,2))) +\n  labs(title = \"250 Heatmap\", x = \"Start \", y = \"Finish\",\n       fill = \"Probability\")\n\n\n\n\n\n\n\n\nWMX class:\n\nall_2024_wmx_start_finish &lt;- all_2024_complete |&gt;\n  filter(class == \"WMX\" & lap == 1) |&gt;\n  select(place, finish)\n\nall_2024_wmx_start_finish_sum &lt;- all_2024_wmx_start_finish |&gt;\n  group_by(place, finish) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_wmx_start_finish_sum_2 &lt;- all_2024_wmx_start_finish_sum |&gt;\n  group_by(place) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_wmx_start_finish_sum_3 &lt;- all_2024_wmx_start_finish_sum |&gt;\n  left_join(all_2024_wmx_start_finish_sum_2) |&gt;\n  mutate(prob = n/total)\n\nrows = 30\ncols = 30\ncats &lt;- 1:30\n\nmatrixwmx_3 &lt;- matrix(0, nrow = rows, ncol = cols)\nfor (i in 1:rows) {\n  for (j in 1:cols) {\n    matrix_row &lt;- all_2024_wmx_start_finish_sum_3 |&gt; \n      filter(place == i & finish == j)\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_wmx_start_finish_sum_3 |&gt; \n        filter(place == i & finish == j) |&gt; pull(prob)\n    }\n    matrixwmx_3[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrixwmx_3) &lt;- cats\ncolnames(matrixwmx_3) &lt;- cats\nprint(round(matrixwmx_3, 2))\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16\n1  1 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n2  0 0.64 0.21 0.14 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n3  0 0.21 0.36 0.07 0.29 0.00 0.07 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n4  0 0.07 0.14 0.29 0.21 0.00 0.07 0.00 0.00 0.00 0.07 0.00 0.14 0.00 0.00 0.00\n5  0 0.00 0.14 0.29 0.36 0.07 0.00 0.07 0.00 0.00 0.00 0.00 0.00 0.07 0.00 0.00\n6  0 0.07 0.00 0.21 0.07 0.29 0.29 0.00 0.00 0.07 0.00 0.00 0.00 0.00 0.00 0.00\n7  0 0.00 0.14 0.00 0.00 0.21 0.21 0.14 0.14 0.00 0.00 0.00 0.14 0.00 0.00 0.00\n8  0 0.00 0.00 0.00 0.00 0.00 0.14 0.29 0.14 0.21 0.07 0.00 0.00 0.14 0.00 0.00\n9  0 0.00 0.00 0.00 0.00 0.14 0.14 0.14 0.07 0.14 0.07 0.14 0.00 0.00 0.00 0.14\n10 0 0.00 0.00 0.00 0.00 0.07 0.00 0.21 0.21 0.21 0.00 0.00 0.14 0.14 0.00 0.00\n11 0 0.00 0.00 0.00 0.07 0.00 0.00 0.00 0.14 0.14 0.14 0.21 0.14 0.07 0.00 0.00\n12 0 0.00 0.00 0.00 0.00 0.00 0.00 0.07 0.07 0.07 0.36 0.21 0.00 0.00 0.07 0.00\n13 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.07 0.21 0.07 0.29 0.07 0.21 0.07\n14 0 0.00 0.00 0.00 0.00 0.00 0.07 0.00 0.07 0.07 0.00 0.21 0.07 0.21 0.14 0.00\n15 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.40 0.10 0.20\n16 0 0.00 0.00 0.00 0.00 0.00 0.00 0.12 0.00 0.00 0.12 0.00 0.00 0.00 0.12 0.12\n17 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n18 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.17\n19 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.17\n20 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.17 0.17 0.00 0.00 0.00\n21 0 0.00 0.00 0.00 0.00 0.17 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.17 0.00\n22 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n23 0 0.00 0.00 0.00 0.00 0.25 0.00 0.00 0.25 0.00 0.00 0.00 0.00 0.00 0.25 0.00\n24 0 0.00 0.00 0.00 0.00 0.25 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n25 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n26 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n27 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n28 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.50 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n29 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.50 0.00 0.00 0.00 0.00\n30 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\n     17   18   19   20   21   22   23   24   25   26   27   28   29 30\n1  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n2  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n3  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n4  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n5  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n6  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n7  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n8  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n9  0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n10 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n11 0.00 0.00 0.07 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n12 0.07 0.07 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n13 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n14 0.07 0.00 0.00 0.00 0.07 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n15 0.00 0.00 0.00 0.20 0.00 0.10 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n16 0.12 0.00 0.00 0.12 0.00 0.00 0.12 0.12 0.00 0.00 0.00 0.00 0.00  0\n17 0.14 0.43 0.14 0.00 0.14 0.00 0.14 0.00 0.00 0.00 0.00 0.00 0.00  0\n18 0.17 0.00 0.17 0.17 0.17 0.17 0.00 0.00 0.00 0.00 0.00 0.00 0.00  0\n19 0.17 0.00 0.17 0.00 0.00 0.17 0.00 0.17 0.00 0.17 0.00 0.00 0.00  0\n20 0.00 0.00 0.00 0.17 0.17 0.00 0.00 0.17 0.00 0.00 0.00 0.17 0.00  0\n21 0.00 0.17 0.00 0.17 0.17 0.00 0.00 0.00 0.17 0.00 0.00 0.00 0.00  0\n22 0.00 0.00 0.33 0.00 0.17 0.33 0.00 0.00 0.00 0.00 0.17 0.00 0.00  0\n23 0.00 0.00 0.00 0.00 0.00 0.00 0.25 0.00 0.00 0.00 0.00 0.00 0.00  0\n24 0.00 0.00 0.00 0.00 0.00 0.25 0.00 0.00 0.25 0.00 0.00 0.00 0.25  0\n25 0.33 0.00 0.00 0.00 0.00 0.00 0.33 0.33 0.00 0.00 0.00 0.00 0.00  0\n26 0.00 0.50 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.50 0.00 0.00  0\n27 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.50 0.00 0.00 0.50 0.00  0\n28 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.50 0.00 0.00 0.00  0\n29 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.50  0\n30 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  1\n\nall_2024_wmx_start_finish_cat &lt;- all_2024_complete |&gt;\n  filter(class == \"WMX\" & lap == 1) |&gt;\n  select(place, finish) |&gt;\n  mutate(place_cat = ifelse(place &gt;= 1 & place &lt;= 5, \"1-5\",\n                           ifelse(place &gt;= 6 & place &lt;= 10, \"6-10\",\n                           ifelse(place &gt;= 11 & place &lt;= 15, \"11-15\",\n                           ifelse(place &gt;= 16 & place &lt;= 20, \"16-20\",\n                           ifelse(place &gt;= 21 & place &lt;= 25, \n                                  \"21-25\",\"26-30\"))))),\n         finish_cat = ifelse(finish &gt;= 1 & finish &lt;= 5, \"1-5\",\n                      ifelse(finish &gt;= 6 & finish &lt;= 10, \"6-10\",\n                      ifelse(finish &gt;= 11 & finish &lt;= 15, \"11-15\",\n                      ifelse(finish &gt;= 16 & finish &lt;= 20, \"16-20\",\n                      ifelse(finish &gt;= 21 & finish &lt;= 25, \"21-25\", \n                             \"26-30\")))))) |&gt;\n  select(place_cat, finish_cat) |&gt;\n  group_by(place_cat, finish_cat) |&gt;\n  summarise(n = n()) |&gt;\n  ungroup()\n\nall_2024_wmx_start_finish_cat_2 &lt;- all_2024_wmx_start_finish_cat |&gt;\n  group_by(place_cat) |&gt;\n  summarise(total = sum(n)) |&gt;\n  ungroup()\n\nall_2024_wmx_start_finish_cat_3 &lt;- all_2024_wmx_start_finish_cat |&gt;\n  left_join(all_2024_wmx_start_finish_cat_2) |&gt;\n  mutate(prob = n/total)\n\nrows2 = 6\ncols2 = 6\ncats2 &lt;- c(\"1-5\", \"6-10\", \"11-15\", \"16-20\", \"21-25\", \"26-30\")\n\nmatrixwmx_4 &lt;- matrix(0, nrow = rows2, ncol = cols2)\nfor (i in 1:rows2) {\n  for (j in 1:cols2) {\n    matrix_row &lt;- all_2024_wmx_start_finish_cat_3 |&gt;\n      filter(place_cat == cats2[i] & finish_cat == cats2[j])\n    if (nrow(matrix_row) == 0) {\n      matrix_value &lt;- 0\n    } else {\n      matrix_value &lt;- all_2024_wmx_start_finish_cat_3 |&gt; \n        filter(place_cat == cats2[i] & finish_cat == cats2[j]) |&gt; pull(prob)\n    }\n    matrixwmx_4[i, j] &lt;- matrix_value\n  }\n}\n\nrownames(matrixwmx_4) &lt;- cats2\ncolnames(matrixwmx_4) &lt;- cats2\nprint(round(matrixwmx_4, 3))\n\n        1-5  6-10 11-15 16-20 21-25 26-30\n1-5   0.886 0.057 0.057 0.000 0.000 0.000\n6-10  0.100 0.700 0.171 0.029 0.000 0.000\n11-15 0.015 0.167 0.652 0.136 0.030 0.000\n16-20 0.000 0.030 0.121 0.485 0.303 0.061\n21-25 0.000 0.174 0.087 0.217 0.435 0.087\n26-30 0.000 0.111 0.111 0.111 0.111 0.556\n\nsf_wmx &lt;- as.data.frame(as.table(matrixwmx_4))\nggplot(sf_wmx, aes(Var1, Var2, fill = Freq)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"white\", high = \"#da3a32\") +\n  geom_text(aes(label = round(Freq,2))) +\n  labs(title = \"WMX Heatmap\", x = \"Start \", y = \"Finish\",\n       fill = \"Probability\")"
  },
  {
    "objectID": "tcmx_report_2024.html#rider-fatique",
    "href": "tcmx_report_2024.html#rider-fatique",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.3 Rider fatique",
    "text": "4.3 Rider fatique\nDo riders get more tired as the moto goes on? We can check this by checking whether lap times increase with lap number?\nWe filter out the first lap since it is not a full lap of the moto.\n450 class:\nWe also filter out lap times over 200 seconds as these are outliers and might affect the model.\n\nall_2024_complete |&gt;\n  filter(class == \"450\" & lap &gt; 1) |&gt;\n  ggplot(aes(x = lap, y = time, \n             color = paste0(round, \"-\", moto))) +\n  geom_point(alpha = 0.2) +\n  geom_smooth() +\n  labs(x = \"Lap\", y = \"Lap Time\", color = \"Race ID\",\n       title = \"450 - All Lap Times\")\n\n\n\n\n\n\n\nall_2024_complete |&gt;\n  filter(class == \"450\" & time &lt; 200 & lap &gt; 1) |&gt;\n  ggplot(aes(x = lap, y = time)) +\n  geom_point(alpha = 0.2) + \n  facet_wrap(~paste0(round, \"-\", moto)) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Lap\", y = \"Lap Time\",\n       title = \"450 - Lap Times by Moto\")\n\n\n\n\n\n\n\n# Applying the linear model\nall_2024_complete |&gt;\n  filter(class == \"450\" & time &lt; 200 & lap &gt; 1) |&gt;\n  group_by(paste0(round, \"-\", moto)) |&gt;\n  do(model = lm(time ~ lap, data = .)) |&gt;\n  mutate(slope = coef(model)[\"lap\"]) |&gt;\n  select(`paste0(round, \"-\", moto)`, slope) |&gt;\n  mutate(across(slope, round, 2)) |&gt;\n  gt() |&gt;\n  cols_label(`paste0(round, \"-\", moto)` = \"Race ID\",\n             slope = \"Slope\")\n\n\n\n\n\n\n\nRace ID\nSlope\n\n\n\n\n1-1\n-0.03\n\n\n1-2\n0.10\n\n\n2-1\n0.17\n\n\n2-2\n-0.75\n\n\n3-1\n0.11\n\n\n3-2\n0.31\n\n\n4-1\n0.43\n\n\n4-2\n0.46\n\n\n5-1\n0.46\n\n\n5-2\n0.39\n\n\n6-1\n-0.06\n\n\n6-2\n0.13\n\n\n7-1\n0.44\n\n\n7-2\n0.65\n\n\n8-1\n0.14\n\n\n8-2\n0.22\n\n\n\n\n\n\n\nThis shows that over the course of motos, lap times of riders are likely to increase in time. This is an indication of fatique as riders are slower. Note that the 450_2024_22 moto ended early due to Dylan Wright’s fall so rider fatigue was yet to happen.\nHere are the average lap times by lap for each moto:\n\nall_2024_complete |&gt;\n  filter(class == \"450\" & time &lt; 200 & lap &gt; 1) |&gt;\n  group_by(paste0(round, \"-\", moto), lap) |&gt;\n  summarize(avg_time = mean(time)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = lap, y = avg_time, \n             color = `paste0(round, \"-\", moto)`)) +\n  geom_line() +\n  labs(x = \"Lap\", y = \"Average Lap Time\", color = \"Race ID\",\n       title = \"450 - Average Lap Times\")\n\n\n\n\n\n\n\n\nThis shows that average lap times are increasing up until the last couple of laps of the moto. I intuit that this is for a couple of reasons. First, we need to consider survivorship bias. Because lapping other riders exists, the final couple of lap times are only going to include the top riders in that moto, making the average lap time much faster here. Second, at the end of a moto, riders are giving it everything they can as they know the race is ending soon.\n250 class:\nWe also filter out lap times over 250 seconds as these are outliers and might affect the model.\n\nall_2024_complete |&gt;\n  filter(class == \"250\" & lap &gt; 1) |&gt;\n  ggplot(aes(x = lap, y = time, \n             color = paste0(round, \"-\", moto))) +\n  geom_point(alpha = 0.2) +\n  geom_smooth() +\n  labs(x = \"Lap\", y = \"Lap Time\", color = \"Race ID\",\n       title = \"250 - All Lap Times\")\n\n\n\n\n\n\n\nall_2024_complete |&gt;\n  filter(class == \"250\" & time &lt; 250 & lap &gt; 1) |&gt;\n  ggplot(aes(x = lap, y = time)) +\n  geom_point(alpha = 0.2) + \n  facet_wrap(~paste0(round, \"-\", moto)) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Lap\", y = \"Lap Time\",\n       title = \"250 - Lap Times by Moto\")\n\n\n\n\n\n\n\n# Applying the linear model\nall_2024_complete |&gt;\n  filter(class == \"250\" & time &lt; 250 & lap &gt; 1) |&gt;\n  group_by(paste0(round, \"-\", moto)) |&gt;\n  do(model = lm(time ~ lap, data = .)) |&gt;\n  mutate(slope = coef(model)[\"lap\"]) |&gt;\n  select(`paste0(round, \"-\", moto)`, slope) |&gt;\n  mutate(across(slope, round, 2)) |&gt;\n  gt() |&gt;\n  cols_label(`paste0(round, \"-\", moto)` = \"Race ID\",\n             slope = \"Slope\")\n\n\n\n\n\n\n\nRace ID\nSlope\n\n\n\n\n1-1\n-0.66\n\n\n1-2\n-0.40\n\n\n2-1\n0.28\n\n\n2-2\n0.30\n\n\n3-1\n-0.93\n\n\n3-2\n-0.45\n\n\n4-1\n0.34\n\n\n4-2\n0.24\n\n\n5-1\n0.24\n\n\n5-2\n0.37\n\n\n6-1\n0.11\n\n\n6-2\n0.14\n\n\n7-1\n0.13\n\n\n7-2\n0.34\n\n\n8-1\n0.30\n\n\n8-2\n0.35\n\n\n\n\n\n\n\nThis shows that for most motos, lap times of riders are likely to increase in time. This is an indication of fatigue as riders are getting slower.\nHere are the average lap times by lap for each moto:\n\nall_2024_complete |&gt;\n  filter(class == \"250\" & time &lt; 250 & lap &gt; 1) |&gt;\n  group_by(paste0(round, \"-\", moto), lap) |&gt;\n  summarize(avg_time = mean(time)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = lap, y = avg_time, \n             color = `paste0(round, \"-\", moto)`)) +\n  geom_line() +\n  labs(x = \"Lap\", y = \"Average Lap Time\", color = \"Race ID\",\n       title = \"250 - Average Lap Times\")\n\n\n\n\n\n\n\n\nThis shows that average lap times are increasing up until the last couple of laps of the moto, as in the 450 class.\nWMX class:\nWe also filter out lap times over 250 seconds as these are outliers and might affect the model.\n\nall_2024_complete |&gt;\n  filter(class == \"WMX\" & lap &gt; 1) |&gt;\n  ggplot(aes(x = lap, y = time, \n             color = paste0(round, \"-\", moto))) +\n  geom_point(alpha = 0.2) +\n  geom_smooth() +\n  labs(x = \"Lap\", y = \"Lap Time\", color = \"Race ID\",\n       title = \"WMX - All Lap Times\")\n\n\n\n\n\n\n\nall_2024_complete |&gt;\n  filter(class == \"WMX\" & time &lt; 250 & lap &gt; 1) |&gt;\n  ggplot(aes(x = lap, y = time)) +\n  geom_point(alpha = 0.2) + \n  facet_wrap(~paste0(round, \"-\", moto)) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Lap\", y = \"Lap Time\",\n       title = \"WMX - Lap Times by Moto\")\n\n\n\n\n\n\n\n# Applying the linear model\nall_2024_complete |&gt;\n  filter(class == \"WMX\" & time &lt; 250 & lap &gt; 1) |&gt;\n  group_by(paste0(round, \"-\", moto)) |&gt;\n  do(model = lm(time ~ lap, data = .)) |&gt;\n  mutate(slope = coef(model)[\"lap\"]) |&gt;\n  select(`paste0(round, \"-\", moto)`, slope) |&gt;\n  mutate(across(slope, round, 2)) |&gt;\n  gt() |&gt;\n  cols_label(`paste0(round, \"-\", moto)` = \"Race ID\",\n             slope = \"Slope\")\n\n\n\n\n\n\n\nRace ID\nSlope\n\n\n\n\n1-1\n-0.89\n\n\n1-2\n-0.79\n\n\n2-1\n-0.56\n\n\n2-2\n1.33\n\n\n3-1\n-0.14\n\n\n3-2\n-0.86\n\n\n5-1\n-1.81\n\n\n5-2\n-1.05\n\n\n6-1\n-1.35\n\n\n6-2\n-1.21\n\n\n7-1\n-1.51\n\n\n7-2\n-0.98\n\n\n8-1\n-0.87\n\n\n8-2\n-1.19\n\n\n\n\n\n\n\nThis shows that for most motos, lap times of riders are likely to decrease in time. Unlike the men’s classes, this is an indication that riders are not fatiguing since they are getting faster.\nHere are the average lap times by lap for each moto:\n\nall_2024_complete |&gt;\n  filter(class == \"WMX\" & time &lt; 250 & lap &gt; 1) |&gt;\n  group_by(paste0(round, \"-\", moto), lap) |&gt;\n  summarize(avg_time = mean(time)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = lap, y = avg_time, \n             color = `paste0(round, \"-\", moto)`)) +\n  geom_line() +\n  labs(x = \"Lap\", y = \"Average Lap Time\", color = \"Race ID\",\n       title = \"WMX - Average Lap Times\")"
  },
  {
    "objectID": "tcmx_report_2024.html#rider-rivalries",
    "href": "tcmx_report_2024.html#rider-rivalries",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.4 Rider rivalries",
    "text": "4.4 Rider rivalries\nWhich two riders in each class battled the most throughout the season? In other words, add up the number of laps where the behind times between adjacent pairs of riders is less than 3 seconds. Which pair spend the most laps in this state?\n450 class:\n\ngaps_450_1 &lt;- all_2024_complete |&gt;\n  filter(class == \"450\") |&gt;\n  drop_na(place) |&gt;\n  select(lap, time, behind, place, race_id, rider) |&gt;\n  group_by(race_id, rider) |&gt;\n  mutate(total_time = cumsum(time)) |&gt;\n  ungroup() |&gt;\n  mutate(next_place = place + 1)\n\ngaps_450_2 &lt;- gaps_450_1 |&gt;\n  left_join(gaps_450_1, by = join_by(next_place == place, \n                                     race_id == race_id,\n                                     lap == lap)) |&gt;\n  select(lap, race_id, rider.x, total_time.x, place, \n         rider.y, total_time.y, next_place) |&gt;\n  mutate(diff = total_time.x - total_time.y) |&gt;\n  drop_na(rider.y) |&gt;\n  filter(diff &gt;= -3)\n\nrival_pairs_450 &lt;- gaps_450_2 |&gt; \n  select(rider.x, rider.y) |&gt;\n  mutate(pair = map2_chr(rider.x, rider.y, \n                         ~paste(sort(c(.x, .y)), collapse = \"-\"))) |&gt;\n  count(pair) |&gt;\n  separate(pair, into = c(\"rider1\", \"rider2\"), sep = \"-\") |&gt;\n  arrange(desc(n))\n\nrival_pairs_450 |&gt;\n  slice_head(n = 10) |&gt;\n  gt() |&gt;\n  cols_label(rider1 = \"Rider A\",\n             rider2 = \"Rider B\",\n             n = \"# of Laps\")\n\n\n\n\n\n\n\nRider A\nRider B\n# of Laps\n\n\n\n\nMITCHELL HARRISON\nPRESTON KILROY\n41\n\n\nAARON TANTI\nPRESTON KILROY\n40\n\n\nDANIEL ELMORE\nPARKER EALES\n40\n\n\nJESS PETTIS\nJOSIAH NATZKE\n34\n\n\nJULIEN BENEK\nTANNER WARD\n28\n\n\nJESS PETTIS\nPRESTON KILROY\n26\n\n\nAARON TANTI\nJOSIAH NATZKE\n25\n\n\nAARON TANTI\nTANNER WARD\n25\n\n\nBRENDAN SIPPLE\nRYAN DERRY\n24\n\n\nGAVIN BROUGH\nPARKER EALES\n24\n\n\n\n\n\n\n\n250 class:\n\ngaps_250_1 &lt;- all_2024_complete |&gt;\n  filter(class == \"250\") |&gt;\n  drop_na(place) |&gt;\n  select(lap, time, behind, place, race_id, rider) |&gt;\n  group_by(race_id, rider) |&gt;\n  mutate(total_time = cumsum(time)) |&gt;\n  ungroup() |&gt;\n  mutate(next_place = place + 1)\n\ngaps_250_2 &lt;- gaps_250_1 |&gt;\n  left_join(gaps_250_1, by = join_by(next_place == place, \n                                     race_id == race_id,\n                                     lap == lap)) |&gt;\n  select(lap, race_id, rider.x, total_time.x, place, \n         rider.y, total_time.y, next_place) |&gt;\n  mutate(diff = total_time.x - total_time.y) |&gt;\n  drop_na(rider.y) |&gt;\n  filter(diff &gt;= -3)\n\nrival_pairs_250 &lt;- gaps_250_2 |&gt; \n  select(rider.x, rider.y) |&gt;\n  mutate(pair = map2_chr(rider.x, rider.y, \n                         ~paste(sort(c(.x, .y)), collapse = \"-\"))) |&gt;\n  count(pair) |&gt;\n  separate(pair, into = c(\"rider1\", \"rider2\"), sep = \"-\") |&gt;\n  arrange(desc(n))\n\nrival_pairs_250 |&gt;\n  slice_head(n = 10) |&gt;\n  gt() |&gt;\n  cols_label(rider1 = \"Rider A\",\n             rider2 = \"Rider B\",\n             n = \"# of Laps\")\n\n\n\n\n\n\n\nRider A\nRider B\n# of Laps\n\n\n\n\nDREW ADAMS\nKAVEN BENOIT\n31\n\n\nGAGE LINVILLE\nQUINN AMYOTTE\n31\n\n\nKAVEN BENOIT\nKRYSTIAN JANIK\n26\n\n\nGAGE LINVILLE\nKAVEN BENOIT\n25\n\n\nDYLAN REMPEL\nTIGER WOOD\n23\n\n\nDYLAN REMPEL\nWYATT KERR\n23\n\n\nSEBASTIEN RACINE\nWYATT KERR\n23\n\n\nCLAYTON SCHMUCKI\nHAYDEN JAMESON\n22\n\n\nTIGER WOOD\nWYATT KERR\n22\n\n\nDYLAN REMPEL\nTYLER MEDAGLIA\n20\n\n\n\n\n\n\n\nWMX class:\n\ngaps_wmx_1 &lt;- all_2024_complete |&gt;\n  filter(class == \"WMX\") |&gt;\n  drop_na(place) |&gt;\n  select(lap, time, behind, place, race_id, rider) |&gt;\n  group_by(race_id, rider) |&gt;\n  mutate(total_time = cumsum(time)) |&gt;\n  ungroup() |&gt;\n  mutate(next_place = place + 1)\n\ngaps_wmx_2 &lt;- gaps_wmx_1 |&gt;\n  left_join(gaps_wmx_1, by = join_by(next_place == place, \n                                     race_id == race_id,\n                                     lap == lap)) |&gt;\n  select(lap, race_id, rider.x, total_time.x, place, \n         rider.y, total_time.y, next_place) |&gt;\n  mutate(diff = total_time.x - total_time.y) |&gt;\n  drop_na(rider.y) |&gt;\n  filter(diff &gt;= -3)\n\nrival_pairs_wmx &lt;- gaps_wmx_2 |&gt; \n  select(rider.x, rider.y) |&gt;\n  mutate(pair = map2_chr(rider.x, rider.y, \n                         ~paste(sort(c(.x, .y)), collapse = \"-\"))) |&gt;\n  count(pair) |&gt;\n  separate(pair, into = c(\"rider1\", \"rider2\"), sep = \"-\") |&gt;\n  arrange(desc(n))\n\nrival_pairs_wmx |&gt;\n  slice_head(n = 10) |&gt;\n  gt() |&gt;\n  cols_label(rider1 = \"Rider A\",\n             rider2 = \"Rider B\",\n             n = \"# of Laps\")\n\n\n\n\n\n\n\nRider A\nRider B\n# of Laps\n\n\n\n\nANI FERGUSON\nBROOK GREENLAW\n16\n\n\nANNALYSE LOPUSHINSKY\nKATRINE FERGUSON\n16\n\n\nEVE BRODEUR\nVIVIANA CONTRERAS\n15\n\n\nHANNAH COLE\nKATRINE FERGUSON\n12\n\n\nJAIME ASTUDILLO\nVIVIANA CONTRERAS\n12\n\n\nAMELIE CROTEAU\nBRITTANI MAJCHER\n11\n\n\nAMELIE CROTEAU\nHANNAH COLE\n10\n\n\nEVE BRODEUR\nJAIME ASTUDILLO\n10\n\n\nEVE BRODEUR\nKAYLIE KAYER\n10\n\n\nISABELLA MORGAN\nMALIA GARANT\n9"
  },
  {
    "objectID": "tcmx_report_2024.html#points-race",
    "href": "tcmx_report_2024.html#points-race",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.5 Points race",
    "text": "4.5 Points race\n\nstandings_450 &lt;- tibble(rider = c(\"JESS PETTIS\", \"JOSIAH NATZKE\", \n                                 \"PRESTON KILROY\",\"AARON TANTI\", \n                                 \"TANNER WARD\", \"PARKER EALES\",\n                                 \"DYLAN WRIGHT\", \"JULIEN BENEK\", \n                                 \"DANIEL ELMORE\", \"MITCHELL HARRISON\"),\n                 total_points = c(355, 344, 300, 252, 234, \n                                  189, 180, 176, 176, 117))\n\npoints_race_450 &lt;- all_2024_complete |&gt;\n  filter(class == \"450\") |&gt;\n  distinct(race_id, rider, points) |&gt;\n  filter(rider %in% standings_450$rider)\n\nfor (i in standings_450$rider) {\n  for(j in points_race_450$race_id) {\n    check &lt;- points_race_450 |&gt; filter(race_id == j & rider == i)\n    if(nrow(check) == 0) {\n            points_race_450 &lt;- points_race_450 |&gt; add_row(race_id = j,\n                                                          rider = i,\n                                                          points = 0)\n    }\n  }\n}\n\npoints_race_450 |&gt;\n  mutate(season_moto = if_else(race_id == \"450_2024_1\", 1,\n                       if_else(race_id == \"450_2024_2\", 2,\n                       if_else(race_id == \"450_2024_3\", 3,\n                       if_else(race_id == \"450_2024_4\", 4,\n                       if_else(race_id == \"450_2024_5\", 5,\n                       if_else(race_id == \"450_2024_6\", 6,\n                       if_else(race_id == \"450_2024_7\", 7,\n                       if_else(race_id == \"450_2024_8\", 8,\n                       if_else(race_id == \"450_2024_9\", 9,\n                       if_else(race_id == \"450_2024_10\", 10,\n                       if_else(race_id == \"450_2024_11\", 11,\n                       if_else(race_id == \"450_2024_12\", 12,\n                       if_else(race_id == \"450_2024_13\", 13,\n                       if_else(race_id == \"450_2024_14\", 14,\n                       if_else(race_id == \"450_2024_15\", \n                               15,16)))))))))))))))) |&gt;\n  arrange(season_moto, rider) |&gt;\n  group_by(rider) |&gt;\n  mutate(total_points = cumsum(points)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = season_moto, y = total_points, color = rider)) +\n  geom_line() +\n  labs(x = \"Moto #\", y = \"Total Points\", title = \"450 Points Race\",\n       color = \"Rider\")\n\n\n\n\n\n\n\n\n\nstandings_250 &lt;- tibble(rider = c(\"KAVEN BENOIT\", \"DREW ADAMS\", \n                                 \"GAGE LINVILLE\", \"SEBASTIEN RACINE\",\n                                 \"WYATT KERR\", \"QUINN AMYOTTE\",\n                                 \"TYLER MEDAGLIA\", \"TIGER WOOD\", \n                                 \"DYLAN REMPEL\", \"EVAN STICE\"),\n                 total_points = c(351, 349, 254, 225, 223, \n                                  215, 178, 162, 155, 141))\n\npoints_race_250 &lt;- all_2024_complete |&gt;\n  filter(class == \"250\") |&gt;\n  distinct(race_id, rider, points) |&gt;\n  filter(rider %in% standings_250$rider)\n\nfor (i in standings_250$rider) {\n  for(j in points_race_250$race_id) {\n    check &lt;- points_race_250 |&gt; filter(race_id == j & rider == i)\n    if(nrow(check) == 0) {\n            points_race_250 &lt;- points_race_250 |&gt; add_row(race_id = j,\n                                                          rider = i,\n                                                          points = 0)\n    }\n  }\n}\n\npoints_race_250 |&gt;\n  mutate(season_moto = if_else(race_id == \"250_2024_1\", 1,\n                       if_else(race_id == \"250_2024_2\", 2,\n                       if_else(race_id == \"250_2024_3\", 3,\n                       if_else(race_id == \"250_2024_4\", 4,\n                       if_else(race_id == \"250_2024_5\", 5,\n                       if_else(race_id == \"250_2024_6\", 6,\n                       if_else(race_id == \"250_2024_7\", 7,\n                       if_else(race_id == \"250_2024_8\", 8,\n                       if_else(race_id == \"250_2024_9\", 9,\n                       if_else(race_id == \"250_2024_10\", 10,\n                       if_else(race_id == \"250_2024_11\", 11,\n                       if_else(race_id == \"250_2024_12\", 12,\n                       if_else(race_id == \"250_2024_13\", 13,\n                       if_else(race_id == \"250_2024_14\", 14,\n                       if_else(race_id == \"250_2024_15\", \n                               15,16)))))))))))))))) |&gt;\n  arrange(season_moto, rider) |&gt;\n  group_by(rider) |&gt;\n  mutate(total_points = cumsum(points)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = season_moto, y = total_points, color = rider)) +\n  geom_line() +\n  labs(x = \"Moto #\", y = \"Total Points\", title = \"250 Points Race\",\n       color = \"Rider\")\n\n\n\n\n\n\n\n\nThe WMX class was not included in this analysis since there were technically three different series - West, East, and E/W Shootout."
  },
  {
    "objectID": "tcmx_report_2024.html#rider-profiles",
    "href": "tcmx_report_2024.html#rider-profiles",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.6 Rider profiles",
    "text": "4.6 Rider profiles\nTop 10 of the 450 class:\n\nmoto_id_450 &lt;- tibble(race_id = c(\"450_2024_1\", \"450_2024_2\",\n                              \"450_2024_3\", \"450_2024_4\",\n                              \"450_2024_5\", \"450_2024_6\",\n                              \"450_2024_7\", \"450_2024_8\",\n                              \"450_2024_9\", \"450_2024_10\",\n                              \"450_2024_11\", \"450_2024_12\",\n                              \"450_2024_13\", \"450_2024_14\",\n                              \"450_2024_15\", \"450_2024_16\"),\n                  moto_id = c(\"11\",\"12\",\"21\",\"22\",\"31\",\"32\",\"41\",\"42\",\n                              \"51\",\"52\",\"61\",\"62\",\"71\",\"72\",\"81\",\"82\"))\n\nprofile &lt;- function(rider_name, num, mx_class, joiner) {\n  profile_1 &lt;- all_2024_complete |&gt;\n  filter(class == mx_class & lap == 1) |&gt;\n  select(race_id, rider, place, finish) |&gt;\n  filter(rider == rider_name) |&gt;\n  full_join(joiner) |&gt;\n  arrange(moto_id) |&gt;\n  select(rider, moto_id, place, finish) |&gt;\n  pivot_longer(cols = c(\"place\", \"finish\"), \n                          names_to = \"category\", \n                          values_to = \"value\") |&gt;\n  mutate(category = ifelse(category == \"place\", \"Start\", \"Finish\")) \n\nprofile_1$category &lt;- factor(profile_1$category, \n                                 levels = c(\"Start\", \"Finish\"))\n\nprofile_1 |&gt;\n  ggplot(aes(x = factor(moto_id), y = value, fill = category)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_text(aes(label = value, color = category), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5, size = 2.5, color = \"black\") +\n  labs(x = \"Moto ID\", y = \"Position\", fill = \" \", \n       title = paste0(\"#\", num, \" \", rider_name)) +\n  scale_fill_manual(values = c(\"Start\" = \"#32D2DA\", \n                               \"Finish\" = \"#da3a32\")) +\n  theme_minimal()\n}\n\nprofile(\"JESS PETTIS\", \"15\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"JOSIAH NATZKE\", \"23\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"PRESTON KILROY\", \"808\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"AARON TANTI\", \"109\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"TANNER WARD\", \"84\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"PARKER EALES\", \"18\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"DYLAN WRIGHT\", \"1\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"JULIEN BENEK\", \"17\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"DANIEL ELMORE\", \"377\", \"450\", moto_id_450)\n\n\n\n\n\n\n\nprofile(\"MITCHELL HARRISON\", \"8\", \"450\", moto_id_450)\n\n\n\n\n\n\n\n\nTop 10 of the 250 class:\n\nmoto_id_250 &lt;- tibble(race_id = c(\"250_2024_1\", \"250_2024_2\",\n                              \"250_2024_3\", \"250_2024_4\",\n                              \"250_2024_5\", \"250_2024_6\",\n                              \"250_2024_7\", \"250_2024_8\",\n                              \"250_2024_9\", \"250_2024_10\",\n                              \"250_2024_11\", \"250_2024_12\",\n                              \"250_2024_13\", \"250_2024_14\",\n                              \"250_2024_15\", \"250_2024_16\"),\n                  moto_id = c(\"11\",\"12\",\"21\",\"22\",\"31\",\"32\",\"41\",\"42\",\n                              \"51\",\"52\",\"61\",\"62\",\"71\",\"72\",\"81\",\"82\"))\n\nprofile(\"KAVEN BENOIT\", \"26\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"DREW ADAMS\", \"300\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"GAGE LINVILLE\", \"402\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"SEBASTIEN RACINE\", \"12\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"WYATT KERR\", \"59\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"QUINN AMYOTTE\", \"14\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"TYLER MEDAGLIA\", \"5\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"TIGER WOOD\", \"143\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"DYLAN REMPEL\", \"19\", \"250\", moto_id_250)\n\n\n\n\n\n\n\nprofile(\"EVAN STICE\", \"316\", \"250\", moto_id_250)\n\n\n\n\n\n\n\n\nTop 10 of the WMX class:\n\nmoto_id_wmx &lt;- tibble(race_id = c(\"wmx_2024_1\", \"wmx_2024_2\",\n                              \"wmx_2024_3\", \"wmx_2024_4\",\n                              \"wmx_2024_5\", \"wmx_2024_6\",\n                              \"wmx_2024_7\", \"wmx_2024_8\",\n                              \"wmx_2024_9\", \"wmx_2024_10\",\n                              \"wmx_2024_11\", \"wmx_2024_12\",\n                              \"wmx_2024_13\", \"wmx_2024_14\",\n                              \"wmx_2024_15\", \"wmx_2024_16\"),\n                  moto_id = c(\"11\",\"12\",\"21\",\"22\",\"31\",\"32\",\"41\",\"42\",\n                              \"51\",\"52\",\"61\",\"62\",\"71\",\"72\",\"81\",\"82\"))\n\nprofile_wmx &lt;- function(rider_name, num) {\n  profile_1 &lt;- all_2024_complete |&gt;\n    mutate(lap = ifelse(round == 4, 1, lap),\n           place = ifelse(round == 4, NA, place)) |&gt;\n    filter(class == \"WMX\" & lap == 1) |&gt;\n    select(race_id, rider, place, finish) |&gt;\n    filter(rider == rider_name) |&gt;\n    full_join(moto_id_wmx) |&gt;\n    arrange(moto_id) |&gt;\n    select(rider, moto_id, place, finish) |&gt;\n    pivot_longer(cols = c(\"place\", \"finish\"), \n                          names_to = \"category\", \n                          values_to = \"value\") |&gt;\n    mutate(category = ifelse(category == \"place\", \"Start\", \"Finish\")) \n\n  profile_1$category &lt;- factor(profile_1$category, \n                                 levels = c(\"Start\", \"Finish\"))\n\n  profile_1 |&gt;\n    ggplot(aes(x = factor(moto_id), y = value, fill = category)) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    geom_text(aes(label = value, color = category), \n            position = position_dodge(width = 0.9), \n            vjust = -0.5, size = 2.5, color = \"black\") +\n    labs(x = \"Moto ID\", y = \"Position\", fill = \" \", \n         title = paste0(\"#\", num, \" \", rider_name)) +\n    scale_fill_manual(values = c(\"Start\" = \"#32D2DA\", \n                               \"Finish\" = \"#da3a32\")) +\n    theme_minimal()\n}\n\nprofile_wmx(\"EVE BRODEUR\", \"1\")\n\n\n\n\n\n\n\nprofile_wmx(\"KAYLIE KAYER\", \"3w\")\n\n\n\n\n\n\n\nprofile_wmx(\"KATRINE FERGUSON\", \"7W\")\n\n\n\n\n\n\n\nprofile_wmx(\"JAIME ASTUDILLO\", \"469\")\n\n\n\n\n\n\n\nprofile_wmx(\"BROOK GREENLAW\", \"6E\")\n\n\n\n\n\n\n\nprofile_wmx(\"VIVIANA CONTRERAS\", \"50\")\n\n\n\n\n\n\n\nprofile_wmx(\"AMELIE CROTEAU\", \"8\")\n\n\n\n\n\n\n\nprofile_wmx(\"BRITTANI MAJCHER\", \"14\")\n\n\n\n\n\n\n\nprofile_wmx(\"TEA FERGUSON\", \"9W\")\n\n\n\n\n\n\n\nprofile_wmx(\"ANI FERGUSON\", \"11\")"
  },
  {
    "objectID": "tcmx_report_2024.html#positions-gained",
    "href": "tcmx_report_2024.html#positions-gained",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.7 Positions gained",
    "text": "4.7 Positions gained\n\nall_2024_poschange &lt;- all_2024_complete |&gt;\n  filter(! race_id %in% c(\"wmx_2024_41\", \"wmx_2024_42\")) |&gt;\n  mutate(race_id_name = paste(race_id, rider, sep = \"_\")) |&gt;\n  mutate(place_next = lead(place, n = 1L,\n                           order_by = race_id_name)) |&gt;\n  group_by(race_id_name) |&gt;\n  mutate(place_next = c(place_next[-n()], NA)) |&gt;\n  ungroup() |&gt;\n  drop_na(place, place_next) |&gt;\n  mutate(places_gain = if_else(place_next &lt; place,\n                               place - place_next, 0),\n         places_lost = if_else(place_next &gt; place,\n                               place_next - place, 0)) |&gt;\n  group_by(rider, class) |&gt;\n  summarize(total_motos = n_distinct(race_id),\n            total_passes = sum(places_gain),\n            avg_finish = round(mean(finish),2),\n            passes_per_moto = round(total_passes/total_motos,2)) |&gt;\n  arrange(desc(passes_per_moto)) |&gt;\n  ungroup()\n\n\nall_2024_poschange |&gt;\n  filter(class == \"450\") |&gt;\n  select(rider, total_motos, total_passes,\n         avg_finish, passes_per_moto) |&gt;\n  arrange(desc(avg_finish)) |&gt;\n  slice_min(avg_finish, n = 15) |&gt;\n  gt() |&gt;\n  cols_label(rider = \"Rider\",\n             total_motos = \"Total Motos\",\n             total_passes = \"Total Passes\",\n             avg_finish = \"Average Finish\",\n             passes_per_moto = \"Passes/Moto\")\n\n\n\n\n\n\n\nRider\nTotal Motos\nTotal Passes\nAverage Finish\nPasses/Moto\n\n\n\n\nJESS PETTIS\n16\n16\n2.33\n1.00\n\n\nJOSIAH NATZKE\n16\n62\n2.46\n3.88\n\n\nPRESTON KILROY\n16\n57\n3.60\n3.56\n\n\nDYLAN WRIGHT\n10\n28\n4.05\n2.80\n\n\nTRISTAN LANE\n4\n18\n4.69\n4.50\n\n\nADRIEN MALAVAL\n4\n12\n4.80\n3.00\n\n\nAARON TANTI\n16\n39\n6.08\n2.44\n\n\nMITCHELL HARRISON\n8\n18\n6.23\n2.25\n\n\nTANNER WARD\n16\n60\n6.56\n3.75\n\n\nJULIEN BENEK\n13\n37\n7.55\n2.85\n\n\nPARKER EALES\n16\n53\n9.17\n3.31\n\n\nJAMES HARRINGTON\n2\n6\n9.50\n3.00\n\n\nDANIEL ELMORE\n16\n40\n9.86\n2.50\n\n\nRILEY BROUGH\n2\n2\n10.48\n1.00\n\n\nKEYLAN MESTON\n6\n23\n10.96\n3.83\n\n\n\n\n\n\n\n\nall_2024_poschange |&gt;\n  filter(class == \"250\") |&gt;\n  select(rider, total_motos, total_passes,\n         avg_finish, passes_per_moto) |&gt;\n  arrange(desc(avg_finish)) |&gt;\n  slice_min(avg_finish, n = 15) |&gt;\n  gt() |&gt;\n  cols_label(rider = \"Rider\",\n             total_motos = \"Total Motos\",\n             total_passes = \"Total Passes\",\n             avg_finish = \"Average Finish\",\n             passes_per_moto = \"Passes/Moto\")\n\n\n\n\n\n\n\nRider\nTotal Motos\nTotal Passes\nAverage Finish\nPasses/Moto\n\n\n\n\nDREW ADAMS\n15\n83\n1.77\n5.53\n\n\nKAVEN BENOIT\n16\n28\n2.13\n1.75\n\n\nKRYSTIAN JANIK\n4\n27\n4.03\n6.75\n\n\nALEXANDER FEDORTSOV\n2\n4\n4.50\n2.00\n\n\nDYLAN WALSH\n2\n7\n5.50\n3.50\n\n\nTYLER MEDAGLIA\n11\n43\n5.61\n3.91\n\n\nWYATT KERR\n16\n115\n6.72\n7.19\n\n\nGAGE LINVILLE\n16\n42\n6.78\n2.62\n\n\nSEBASTIEN RACINE\n16\n144\n7.76\n9.00\n\n\nDYLAN REMPEL\n13\n47\n7.81\n3.62\n\n\nQUINN AMYOTTE\n16\n44\n8.28\n2.75\n\n\nTIGER WOOD\n16\n75\n10.89\n4.69\n\n\nJOSH CLARK\n8\n17\n11.90\n2.12\n\n\nEVAN STICE\n16\n78\n11.99\n4.88\n\n\nLUKE FAUSER\n8\n51\n12.61\n6.38\n\n\n\n\n\n\n\n\nall_2024_poschange |&gt;\n  filter(class == \"WMX\") |&gt;\n  select(rider, total_motos, total_passes,\n         avg_finish, passes_per_moto) |&gt;\n  arrange(desc(avg_finish)) |&gt;\n  slice_min(avg_finish, n = 15) |&gt;\n  gt() |&gt;\n  cols_label(rider = \"Rider\",\n             total_motos = \"Total Motos\",\n             total_passes = \"Total Passes\",\n             avg_finish = \"Average Finish\",\n             passes_per_moto = \"Passes/Moto\")\n\n\n\n\n\n\n\nRider\nTotal Motos\nTotal Passes\nAverage Finish\nPasses/Moto\n\n\n\n\nJORDAN JARVIS\n2\n0\n1.00\n0.00\n\n\nJAIME ASTUDILLO\n8\n0\n1.79\n0.00\n\n\nEVE BRODEUR\n12\n12\n2.05\n1.00\n\n\nVIVIANA CONTRERAS\n8\n5\n2.28\n0.62\n\n\nKAYLIE KAYER\n13\n21\n3.75\n1.62\n\n\nLEXI PECHOUT\n2\n2\n4.50\n1.00\n\n\nKATRINE FERGUSON\n14\n31\n4.53\n2.21\n\n\nANNALYSE LOPUSHINSKY\n6\n21\n4.56\n3.50\n\n\nHANNAH COLE\n6\n21\n5.76\n3.50\n\n\nBRITTANI MAJCHER\n6\n26\n5.79\n4.33\n\n\nAMELIE CROTEAU\n8\n16\n5.96\n2.00\n\n\nSARAH-KIM VILLENEUVE\n2\n17\n6.50\n8.50\n\n\nDESTINY SLINGERLAND\n4\n12\n7.70\n3.00\n\n\nJORDANNE TROTTIER\n3\n1\n7.71\n0.33\n\n\nSIENNA BROWN\n4\n8\n7.75\n2.00\n\n\n\n\n\n\n\n\nggplot(all_2024_poschange,\n       aes(x = avg_finish,\n           y = passes_per_moto,\n           color = class)) +\n  geom_point() +\n  geom_smooth(method = \"loess\") +\n  labs(x = \"Average Finish\",\n       y = \"Passes per Moto\",\n       color = \"Class\")\n\n\n\n\n\n\n\n\nLots of good insight in this graph. First, we see a similar pattern for all three classes. The riders who finish near the front are not making many passes. They usually have good starts and stay in the front throughout the moto. The riders who finish near the rear are not making many passes. They usually have poor starts and stay in the back throughout the moto. The most passing occurs in the middle of pack.\nSecond, we see that the 250 class has the most passing and the WMX class has the least amount of passing."
  },
  {
    "objectID": "tcmx_report_2024.html#best-starters",
    "href": "tcmx_report_2024.html#best-starters",
    "title": "Triple Crown Motocross - 2024 Report",
    "section": "4.8 Best starters",
    "text": "4.8 Best starters\nUnfortunately we don’t access to any holeshot data, so we define the start variable as the rider’s place after the first lap.\n\nall_2024_startfinish &lt;- all_2024_complete |&gt;\n  filter(! race_id %in% c(\"wmx_2024_41\", \"wmx_2024_42\")) |&gt;\n  filter(lap == 1) |&gt;\n  select(rider, finish, place, race_id, class) |&gt;\n  group_by(rider, class) |&gt;\n  summarize(total_motos = n_distinct(race_id),\n            avg_start = round(mean(place), 2),\n            avg_finish = round(mean(finish), 2)) |&gt;\n  ungroup()\n\n\nall_2024_startfinish |&gt;\n  filter(class == \"450\") |&gt;\n  select(rider, total_motos, avg_start,\n         avg_finish) |&gt;\n  arrange(desc(avg_start)) |&gt;\n  slice_min(avg_start, n = 15) |&gt;\n  gt() |&gt;\n  cols_label(rider = \"Rider\",\n             total_motos = \"Total Motos\",\n             avg_start = \"Average Start\",\n             avg_finish = \"Average Finish\")\n\n\n\n\n\n\n\nRider\nTotal Motos\nAverage Start\nAverage Finish\n\n\n\n\nJESS PETTIS\n16\n2.00\n2.25\n\n\nDYLAN WRIGHT\n10\n4.70\n6.00\n\n\nAARON TANTI\n16\n4.81\n6.06\n\n\nMITCHELL HARRISON\n8\n5.50\n7.88\n\n\nJOSIAH NATZKE\n16\n5.69\n2.50\n\n\nPRESTON KILROY\n16\n6.38\n3.62\n\n\nADRIEN MALAVAL\n4\n7.50\n4.75\n\n\nTANNER WARD\n16\n7.88\n6.62\n\n\nTRISTAN LANE\n4\n8.25\n4.75\n\n\nRILEY BROUGH\n2\n8.50\n10.50\n\n\nJULIEN BENEK\n13\n8.69\n7.46\n\n\nBLAKE DAVIES\n1\n9.00\n30.00\n\n\nNICK COLLINS\n2\n9.50\n14.50\n\n\nDANIEL ELMORE\n16\n9.88\n10.00\n\n\nJAMES HARRINGTON\n2\n10.50\n9.50\n\n\n\n\n\n\n\n\nall_2024_startfinish |&gt;\n  filter(class == \"250\") |&gt;\n  select(rider, total_motos, avg_start,\n         avg_finish) |&gt;\n  arrange(desc(avg_start)) |&gt;\n  slice_min(avg_start, n = 15) |&gt;\n  gt() |&gt;\n  cols_label(rider = \"Rider\",\n             total_motos = \"Total Motos\",\n             avg_start = \"Average Start\",\n             avg_finish = \"Average Finish\")\n\n\n\n\n\n\n\nRider\nTotal Motos\nAverage Start\nAverage Finish\n\n\n\n\nKAVEN BENOIT\n16\n3.44\n2.12\n\n\nALEXANDER FEDORTSOV\n2\n5.00\n4.50\n\n\nDYLAN WALSH\n2\n6.00\n5.50\n\n\nDREW ADAMS\n16\n6.88\n3.94\n\n\nGAGE LINVILLE\n16\n6.94\n9.75\n\n\nQUINN AMYOTTE\n16\n7.62\n8.75\n\n\nJOSH CLARK\n8\n8.38\n11.88\n\n\nLUKE FAUSER\n8\n8.88\n13.12\n\n\nDYLAN REMPEL\n13\n8.92\n11.92\n\n\nKRYSTIAN JANIK\n4\n9.50\n4.00\n\n\nNOAH VINEY\n2\n10.00\n15.00\n\n\nBRADEN SPANGLE\n3\n11.00\n22.00\n\n\nNOAH PORTER\n8\n11.12\n14.25\n\n\nTYLER MEDAGLIA\n12\n11.25\n10.08\n\n\nTIGER WOOD\n16\n11.62\n10.88\n\n\n\n\n\n\n\n\nall_2024_startfinish |&gt;\n  filter(class == \"WMX\") |&gt;\n  select(rider, total_motos, avg_start,\n         avg_finish) |&gt;\n  arrange(desc(avg_start)) |&gt;\n  slice_min(avg_start, n = 15) |&gt;\n  gt() |&gt;\n  cols_label(rider = \"Rider\",\n             total_motos = \"Total Motos\",\n             avg_start = \"Average Start\",\n             avg_finish = \"Average Finish\")\n\n\n\n\n\n\n\nRider\nTotal Motos\nAverage Start\nAverage Finish\n\n\n\n\nJORDAN JARVIS\n2\n1.00\n1.00\n\n\nJAIME ASTUDILLO\n8\n1.62\n1.75\n\n\nVIVIANA CONTRERAS\n8\n2.62\n2.25\n\n\nEVE BRODEUR\n12\n3.00\n2.00\n\n\nLEXI PECHOUT\n2\n4.00\n4.50\n\n\nKAYLIE KAYER\n13\n5.00\n3.77\n\n\nSAMANTHA FARR\n4\n5.50\n9.75\n\n\nKATRINE FERGUSON\n14\n5.93\n4.86\n\n\nJORDANNE TROTTIER\n3\n6.67\n7.67\n\n\nBAILEY ORBANSKI\n2\n7.00\n10.00\n\n\nAMELIE CROTEAU\n8\n7.38\n5.88\n\n\nANNALYSE LOPUSHINSKY\n6\n7.67\n4.50\n\n\nLAUREN PUHLMANN\n6\n7.83\n10.33\n\n\nHANNAH COLE\n6\n8.33\n5.83\n\n\nANI FERGUSON\n10\n8.50\n9.80\n\n\n\n\n\n\n\nWe can see that those who start strong often finish strong. For the 250 and 450 class, the best starter was also the champion.\nWe can also see in which direction the rider usually heads after the start. If the average finish is higher than the average start, the rider usually drops back. If the average finish is lower than the average start, the rider usually climbs up. However, it is important to note that a rider who starts well usually has no place to go but down. This is why Jess Pettis has an average finish below his average start because he starts so many motos in the lead."
  }
]